[
    {
        "id":  "c6fdc014f79c73d7",
        "type":  "tab",
        "label":  "radar03",
        "disabled":  false,
        "info":  ""
    },
    {
        "id":  "d3dfdfd513fb0aa2",
        "type":  "tab",
        "label":  "modbusSolar",
        "disabled":  false,
        "info":  ""
    },
    {
        "id":  "e8bb17e4f6e25a56",
        "type":  "tab",
        "label":  "pushToLedDisplay",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "a732ee65fe020f24",
        "type":  "tab",
        "label":  "Recording ",
        "disabled":  true,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "e24e7ea8469bab08",
        "type":  "tab",
        "label":  "Data Handling",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "19b3c3c4c41722e8",
        "type":  "tab",
        "label":  "Decode Data",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "fe153e5da4b937a6",
        "type":  "group",
        "z":  "c6fdc014f79c73d7",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "c00a95d04f85d204",
                      "5c387bf597313272",
                      "2924467d7f1b989c",
                      "6af15a9e987a0b63",
                      "6af2a7d381f9eaf0"
                  ],
        "x":  54,
        "y":  39,
        "w":  752,
        "h":  142
    },
    {
        "id":  "923a137fcd331aae",
        "type":  "group",
        "z":  "c6fdc014f79c73d7",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "inject-test",
                      "function-path",
                      "file-save",
                      "debug-out",
                      "1c9ac09624af80b4"
                  ],
        "x":  54,
        "y":  199,
        "w":  752,
        "h":  162
    },
    {
        "id":  "f176d52d.8a5d98",
        "type":  "tls-config",
        "name":  "",
        "cert":  "",
        "key":  "",
        "ca":  "",
        "certname":  "",
        "keyname":  "",
        "caname":  "",
        "servername":  "",
        "verifyservercert":  true
    },
    {
        "id":  "f52ff211.a533d",
        "type":  "mqtt-broker",
        "z":  "c6fdc014f79c73d7",
        "name":  "",
        "broker":  "mqtts://broker.react.net.my",
        "port":  "1883",
        "tls":  "f176d52d.8a5d98",
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  true,
        "protocolVersion":  "4",
        "keepalive":  "60",
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "7459e1c0f90208e3",
        "type":  "serial-port",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "solar-batery",
        "serialport":  "/dev/ttyS3",
        "serialbaud":  "9600",
        "databits":  "8",
        "parity":  "none",
        "stopbits":  "1",
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "200",
        "bin":  "bin",
        "out":  "time",
        "addchar":  "",
        "responsetimeout":  "10000"
    },
    {
        "id":  "499334b129b933ed",
        "type":  "serial-port",
        "z":  "e8bb17e4f6e25a56",
        "name":  "DISPLAY",
        "serialport":  "/dev/ttyS0",
        "serialbaud":  "9600",
        "databits":  8,
        "parity":  "none",
        "stopbits":  1,
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "\\n",
        "bin":  "bin",
        "out":  "char",
        "addchar":  "",
        "responsetimeout":  10000
    },
    {
        "id":  "57ac84494075ccc8",
        "type":  "serial-port",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "serialport":  "/dev/ttyS0",
        "serialbaud":  "9600",
        "databits":  8,
        "parity":  "none",
        "stopbits":  1,
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "\\n",
        "bin":  "bin",
        "out":  "char",
        "addchar":  "",
        "responsetimeout":  10000
    },
    {
        "id":  "951f201ab53ccfb0",
        "type":  "serial-port",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "serialport":  "/dev/ttyS0",
        "serialbaud":  "9600",
        "databits":  8,
        "parity":  "none",
        "stopbits":  1,
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "\\n",
        "bin":  "bin",
        "out":  "char",
        "addchar":  "",
        "responsetimeout":  10000
    },
    {
        "id":  "db51e67223e51d73",
        "type":  "mqtt-broker",
        "name":  "",
        "broker":  "mqtts://broker.react.net.my",
        "port":  1883,
        "tls":  "f176d52d.8a5d98",
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  true,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "394275e31b267799",
        "type":  "mqtt-broker",
        "name":  "react 2",
        "broker":  "broker.react.net.my",
        "port":  "8883",
        "tls":  "f176d52d.8a5d98",
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  true,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "2054b162aec9c313",
        "type":  "mqtt-broker",
        "name":  "",
        "broker":  "broker.react.net.my",
        "port":  "8883",
        "tls":  "f176d52d.8a5d98",
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  true,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "d882c2298e9bfc3b",
        "type":  "mqtt-broker",
        "name":  "",
        "broker":  "queue.laundritek.net",
        "port":  1883,
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  false,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "544f0af136055690",
        "type":  "sqlitedb",
        "db":  "/mnt/ssd/paadData/",
        "mode":  "RWC"
    },
    {
        "id":  "bbef3c3cecc6faf8",
        "type":  "mqtt-broker",
        "name":  "",
        "broker":  "cloud.lightsol.net",
        "port":  1883,
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  false,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "c00a95d04f85d204",
        "type":  "mqtt out",
        "z":  "c6fdc014f79c73d7",
        "g":  "fe153e5da4b937a6",
        "name":  "new broker",
        "topic":  "",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "bbef3c3cecc6faf8",
        "x":  710,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "5c387bf597313272",
        "type":  "tcp in",
        "z":  "c6fdc014f79c73d7",
        "g":  "fe153e5da4b937a6",
        "name":  "",
        "server":  "client",
        "host":  "192.168.14.11",
        "port":  "8998",
        "datamode":  "stream",
        "datatype":  "buffer",
        "newline":  "",
        "topic":  "",
        "trim":  false,
        "base64":  false,
        "tls":  "",
        "x":  180,
        "y":  140,
        "wires":  [
                      [
                          "6af15a9e987a0b63"
                      ]
                  ]
    },
    {
        "id":  "2924467d7f1b989c",
        "type":  "comment",
        "z":  "c6fdc014f79c73d7",
        "g":  "fe153e5da4b937a6",
        "name":  "PaasData",
        "info":  "Couting accurately.",
        "x":  140,
        "y":  100,
        "wires":  [

                  ]
    },
    {
        "id":  "6af15a9e987a0b63",
        "type":  "function",
        "z":  "c6fdc014f79c73d7",
        "g":  "fe153e5da4b937a6",
        "name":  "Counting and Classification",
        "func":  "const HEADER = Buffer.from([0x55, 0xAA, 0x55, 0xBB]);\nconst FOOTER = Buffer.from([0x55, 0xCC, 0x55, 0xDD]);\nconst packet = Buffer.from(msg.payload, \u0027hex\u0027); // Convert HEX string to Buffer\n\nconst TARGET_TYPES = {\n    0x01: \"C6\", 0x02: \"C6\", 0x03: \"C6\", 0x04: \"C5\",\n    0x05: \"C2\", 0x06: \"C1\", 0x07: \"C1\", 0x08: \"C4\",\n    0x09: \"C3\", 0x0A: \"C3\", 0x0C: \"C4\", 0x0E: \"C2\"\n};\n\nif (!packet.subarray(0, HEADER.length).equals(HEADER) ||\n    !packet.subarray(packet.length - FOOTER.length).equals(FOOTER)) {\n    node.warn(\"Invalid packet: Missing HEADER or FOOTER\");\n    return null;\n}\n\nconst typeByte = packet[HEADER.length];\nif (typeByte !== 0x05) return null;\n\nconst checksum = packet[5];\nconst deviceIDBuffer = packet.subarray(8, 28);\nconst deviceID = deviceIDBuffer.toString(\u0027hex\u0027);\n\nconst timestampMs = packet.readBigUInt64BE(28);\nconst malaysiaOffset = 8 * 60 * 60 * 1000;\nconst timestampDate = new Date(Number(timestampMs) + malaysiaOffset);\nconst formattedTimestamp = timestampDate.toISOString();\n\nconst numEntries = packet.readUInt16BE(36);\nlet offset = 38;\nconst PASS_DATA_SIZE = 23;\nlet passData = [];\n\nfor (let i = 0; i \u003c numEntries; i++) {\n    if (packet.length \u003c offset + PASS_DATA_SIZE) break;\n    const entryData = packet.subarray(offset, offset + PASS_DATA_SIZE);\n\n    // Check occupancy status at byte index 18.\n    // If not \"Entering\" (i.e. value 1), ignore this target.\n    const occupancyStatus = entryData.readUInt8(18);\n    if (occupancyStatus !== 1) {\n        offset += PASS_DATA_SIZE;\n        continue;\n    }\n\n    const laneNumber = entryData.readUInt16BE(0);\n    const vehicleSpeed = (entryData.readUInt16BE(4) / 10.0);\n    const targetTypeRaw = entryData.readUInt8(19);\n    const targetType = TARGET_TYPES[targetTypeRaw] || \"other\";\n\n    passData.push({\n        gatewayID: \"0250f4000000\",\n        lane: laneNumber,\n        class: targetType,\n        speed: vehicleSpeed\n    });\n    offset += PASS_DATA_SIZE;\n}\n\n// If no targets meet the \"Entering\" criteria, completely ignore the packet.\nif (passData.length === 0) {\n    return null;\n}\nmsg.topic = \"sss/class/data\"\nmsg.payload = {\n    header: {\n        gatewayID:\"0250f4000000\",\n        frameType: typeByte,\n        checksum: checksum,\n        deviceId: deviceID,\n        timestamp: formattedTimestamp,\n        numberOfTargets: passData.length\n    },\n    target: passData[0]\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  460,
        "y":  140,
        "wires":  [
                      [
                          "c00a95d04f85d204",
                          "6af2a7d381f9eaf0",
                          "function-path",
                          "80238d947c3c61d2"
                      ]
                  ]
    },
    {
        "id":  "6af2a7d381f9eaf0",
        "type":  "debug",
        "z":  "c6fdc014f79c73d7",
        "g":  "fe153e5da4b937a6",
        "name":  "debug 12",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  700,
        "y":  140,
        "wires":  [

                  ]
    },
    {
        "id":  "inject-test",
        "type":  "inject",
        "z":  "c6fdc014f79c73d7",
        "g":  "923a137fcd331aae",
        "name":  "Inject Test Data",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "payload":  "{\"header\":{\"frameType\":5,\"checksum\":48,\"deviceId\":\"5353535f4b75616c614c69706973310000000000\",\"timestamp\":\"2025-08-18T11:04:18.771Z\",\"numberOfTargets\":1},\"target\":{\"lane\":11,\"class\":\"C3\",\"speed\":55}}",
        "payloadType":  "json",
        "x":  180,
        "y":  320,
        "wires":  [
                      [
                          "function-path",
                          "debug-out"
                      ]
                  ]
    },
    {
        "id":  "function-path",
        "type":  "function",
        "z":  "c6fdc014f79c73d7",
        "d":  true,
        "g":  "923a137fcd331aae",
        "name":  "Build Daily Path",
        "func":  "let now = new Date();\nlet dateStr = now.toISOString().split(\"T\")[0];  // YYYY-MM-DD\n\n// Build folder + filename\nlet folder = \"/mnt/ssd/paadData/\" + dateStr;\nlet filename = folder + \"/data.json\";\n\n// Add wrapper with timestamp\nlet record = {\n    timestamp: now.toISOString(),\n    data: msg.payload\n};\n\nmsg.filename = filename;\nmsg.payload = JSON.stringify(record) + \"\\n\";\n\nreturn msg;",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  460,
        "y":  300,
        "wires":  [
                      [
                          "file-save",
                          "debug-out"
                      ]
                  ]
    },
    {
        "id":  "file-save",
        "type":  "file",
        "z":  "c6fdc014f79c73d7",
        "d":  true,
        "g":  "923a137fcd331aae",
        "name":  "Write to SSD",
        "filename":  "filename",
        "filenameType":  "msg",
        "appendNewline":  false,
        "createDir":  true,
        "overwriteFile":  "false",
        "encoding":  "none",
        "x":  670,
        "y":  280,
        "wires":  [
                      [

                      ]
                  ]
    },
    {
        "id":  "debug-out",
        "type":  "debug",
        "z":  "c6fdc014f79c73d7",
        "g":  "923a137fcd331aae",
        "name":  "Debug Output",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "true",
        "targetType":  "full",
        "x":  680,
        "y":  320,
        "wires":  [

                  ]
    },
    {
        "id":  "1c9ac09624af80b4",
        "type":  "comment",
        "z":  "c6fdc014f79c73d7",
        "g":  "923a137fcd331aae",
        "name":  "Store passData save data /mnt/ssd/paadData",
        "info":  "",
        "x":  250,
        "y":  240,
        "wires":  [

                  ]
    },
    {
        "id":  "80238d947c3c61d2",
        "type":  "q-gate",
        "z":  "c6fdc014f79c73d7",
        "name":  "",
        "controlTopic":  "control",
        "defaultState":  "open",
        "openCmd":  "open",
        "closeCmd":  "close",
        "toggleCmd":  "toggle",
        "queueCmd":  "queue",
        "defaultCmd":  "default",
        "triggerCmd":  "trigger",
        "flushCmd":  "flush",
        "resetCmd":  "reset",
        "peekCmd":  "peek",
        "dropCmd":  "drop",
        "statusCmd":  "status",
        "maxQueueLength":  "100",
        "keepNewest":  false,
        "qToggle":  false,
        "persist":  true,
        "storeName":  "default",
        "x":  870,
        "y":  300,
        "wires":  [
                      [
                          "c00a95d04f85d204"
                      ]
                  ]
    },
    {
        "id":  "02420378b682d2a9",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  530,
        "y":  60,
        "wires":  [

                  ]
    },
    {
        "id":  "5f7aa11225841d0b",
        "type":  "mqtt out",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "topic":  "sss/solar/data",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "bbef3c3cecc6faf8",
        "x":  700,
        "y":  180,
        "wires":  [

                  ]
    },
    {
        "id":  "b2faa1afe512a80c",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  670,
        "y":  120,
        "wires":  [

                  ]
    },
    {
        "id":  "f69ef20e49fd5e67",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "GET-BATTERY INFO",
        "func":  "// Define the command to request 22 registers starting from 0x200\n// let commandHex = \"41160F0100009D0A0B0B04020016211A2B\";\nlet commandHex = \"01040200001A7079\"\n\n// Convert the hex string to a Buffer object\nmsg.payload = Buffer.from(commandHex, \u0027hex\u0027);\n\n// Send the command to the serial out node\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  280,
        "y":  280,
        "wires":  [
                      [
                          "0870edf5488db2a6"
                      ]
                  ]
    },
    {
        "id":  "ae3ca7f3c39fa801",
        "type":  "inject",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "*/10 0-23 * * *",
        "once":  true,
        "onceDelay":  0.1,
        "topic":  "",
        "payload":  "",
        "payloadType":  "str",
        "x":  90,
        "y":  280,
        "wires":  [
                      [
                          "f69ef20e49fd5e67"
                      ]
                  ]
    },
    {
        "id":  "50a1a20f3e3a035f",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "debug 13",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  700,
        "y":  540,
        "wires":  [

                  ]
    },
    {
        "id":  "49e26240e82539d0",
        "type":  "serial in",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "",
        "serial":  "7459e1c0f90208e3",
        "x":  110,
        "y":  120,
        "wires":  [
                      [
                          "02420378b682d2a9",
                          "d2a2d19e95e2a503"
                      ]
                  ]
    },
    {
        "id":  "0870edf5488db2a6",
        "type":  "serial out",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "command request",
        "serial":  "7459e1c0f90208e3",
        "x":  490,
        "y":  280,
        "wires":  [

                  ]
    },
    {
        "id":  "d2a2d19e95e2a503",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "DECODE BATTERY INFO",
        "func":  "let buf = Buffer.isBuffer(msg.payload) ? msg.payload : Buffer.from(msg.payload);\nif (buf.length \u003c 3) return null;\n\n// Define metadata\n//const deveui = \"25070230139\"; \nconst gatewayID =\"0250f4000000\";\n// change this if needed\nconst ipAdress = \"http://192.168.14.1\";\nconst devicename = \"bivocom-14\";\n\nconst byteCount = buf[2];\nconst data = buf.slice(3, 3 + byteCount);\n\nlet payload = {\n    gatewayID,\n    ipAdress,\n    devicename,\n    alarm: null,\n    remainingAh: null,\n    batterySoc: null,\n    humidity: null,\n    batteryPower: null,\n    totalBatteryVoltage: null,\n    totalBatteryCurrent: null,\n    batteryChargingCurrent: null,\n    batteryDischargeCurrent: null,\n    temperatures1: null,\n    temperatures2: null,\n    remainingHours: null,\n    remainingDays: null\n};\n\n// Parse registers from 0x0200 onward\nfor (let i = 0; i \u003c data.length; i += 2) {\n    let addr = 0x0200 + (i / 2);\n    let raw = data.readUInt16BE(i);\n\n    switch (addr) {\n        case 0x0201: // Warning information 1\n            payload.alarm = raw;\n            break;\n        case 0x0203: // Number of AH remaining\n            payload.remainingAh = raw / 10;\n            break;\n        case 0x0204: // Residual power SOC / PWM duty\n            payload.batterySoc = raw \u003e\u003e 8;\n            payload.humidity = raw \u0026 0xFF;\n            break;\n        case 0x0205: // Power of battery (W)\n            payload.batteryPower = raw;\n            break;\n        case 0x0206: // Total battery voltage\n            payload.totalBatteryVoltage = raw / 10;\n            break;\n        case 0x0207: // Total battery current\n            payload.totalBatteryCurrent = (raw \u003e 32767 ? raw - 65536 : raw) / 10;\n            break;\n        case 0x0208: // Charging current\n            payload.batteryChargingCurrent = (raw \u003e 32767 ? raw - 65536 : raw) / 100;\n            break;\n        case 0x0209: // Discharge current\n            payload.batteryDischargeCurrent = (raw \u003e 32767 ? raw - 65536 : raw) / 100;\n            break;\n        case 0x020A: // Temperature 1/2\n            let temp1 = raw \u003e\u003e 8;\n            let temp2 = raw \u0026 0xFF;\n            if (temp1 \u003e 127) temp1 -= 256;\n            if (temp2 \u003e 127) temp2 -= 256;\n            payload.temperatures1 = temp1;\n            payload.temperatures2 = temp2;\n            break;\n        case 0x0214: // Internal timestamp (low 16 bits)\n            payload.remainingHours = raw;\n            break;\n        case 0x0215: // Remaining days\n            payload.remainingDays = raw;\n            break;\n    }\n}\n\n// Final output\nmsg.payload = payload;\nreturn msg;",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  380,
        "y":  140,
        "wires":  [
                      [
                          "a2df8d28ff0f31db"
                      ]
                  ]
    },
    {
        "id":  "a2df8d28ff0f31db",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "function 1",
        "func":  "let payload = msg.payload;\n\nconst MPPT_EFFICIENCY = 0.95;\n\nmsg.topic = \"sss/solar/data\"\n\n// 1. Total energy discharge\npayload.totalEnergyDischarge = payload.batteryDischargeCurrent * payload.totalBatteryVoltage;\n\n// 2. Total energy charge\npayload.totalEnergyCharge = payload.batteryChargingCurrent * payload.totalBatteryVoltage;\n\n// 3. Dynamic solar panel voltage (calculated from power)\nlet solarPower = (payload.totalBatteryVoltage * payload.batteryChargingCurrent) / MPPT_EFFICIENCY;\npayload.solarPanelVoltage = (payload.batteryChargingCurrent \u003e 0)\n    ? (solarPower / payload.batteryChargingCurrent)\n    : 0;\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  500,
        "y":  200,
        "wires":  [
                      [
                          "b2faa1afe512a80c",
                          "5f7aa11225841d0b"
                      ]
                  ]
    },
    {
        "id":  "9e6d1b1ffdff3777",
        "type":  "function",
        "z":  "e8bb17e4f6e25a56",
        "name":  "sniff from 00x05",
        "func":  "const HEADER = Buffer.from([0x55, 0xAA, 0x55, 0xBB]);\nconst packet = Buffer.from(msg.payload);\nconst typeByte = packet[HEADER.length];\n\nif (typeByte === 0x05) {\n   msg.payload = packet.toString(\u0027hex\u0027).toUpperCase();\n   msg.payload = packet;\n   if(msg.payload.length === 64){\n    // let speed = hexString.readUInt16BE(42) / 10;\n    // let speeds = parseInt(speed);\n    //         //  msg.payload = speed / 10;\n    //         // Only send the speed if it\u0027s 20 or above\n    //     if (speeds \u003e 20) {\n    //         let numStr = speeds.toString();\n    //             // Convert each digit to its ASCII value (in hex)\n    //         let hexDigits = numStr.split(\u0027\u0027).map(digit =\u003e digit.charCodeAt(0).toString(16).toUpperCase());\n\n    //             // Combine into a buffer if needed\n    //         msg.payload = Buffer.from(hexDigits.map(d =\u003e parseInt(d, 16)));\n    //             //msg.payload = parseInt(speed);\n    //         }       \n    return msg;   \n   }\n   \n}\n//return null;\n\n// \u0026\u0026 packet.length == 128",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  200,
        "y":  280,
        "wires":  [
                      [
                          "d28347799e7e47c1",
                          "18f04cb4c55de653",
                          "600b684b44c4f626",
                          "7b1f9940bb9b2685"
                      ]
                  ]
    },
    {
        "id":  "d28347799e7e47c1",
        "type":  "function",
        "z":  "e8bb17e4f6e25a56",
        "name":  "decode data",
        "func":  "// Check if payload exists and is valid\nif (msg.payload) {\n    let hexString = msg.payload;\n\n    if (typeof hexString === \"string\" \u0026\u0026 hexString.length \u003e= 76) {\n        try {\n            // Extract first target data section (starting at byte 39)\n            let target1 = {\n                // Target ID (10 bytes)\n                targetId: hexString.substring(76, 96),\n                \n                // Target Lane (1 byte)\n                lane: parseInt(hexString.substring(96, 98), 16),\n                \n                // Target Type (1 byte)\n                type: parseInt(hexString.substring(98, 100), 16),\n                \n                // Color (1 byte)\n                color: parseInt(hexString.substring(100, 102), 16),\n                \n                // Skip plate number (12 bytes of zeros)\n                \n                // X Coordinate (2 bytes) - might be negative\n                xCoord: (parseInt(hexString.substring(126, 130), 16) \u003c\u003c 16 \u003e\u003e 16) / 10,\n                \n                // Y Coordinate (2 bytes)\n                yCoord: parseInt(hexString.substring(130, 134), 16) / 10,\n                \n                // Speed (2 bytes)\n                speed: (parseInt(hexString.substring(134, 138), 16) / 10) * 3.6,\n                \n                // Image X axis (2 bytes)\n                imageX: parseInt(hexString.substring(138, 142), 16),\n                \n                // Image Y axis (2 bytes)\n                imageY: parseInt(hexString.substring(142, 146), 16),\n                \n                // Target Azimuth Angle (2 bytes)\n                azimuth: parseInt(hexString.substring(154, 158), 16) / 10,\n                \n                // Vehicle dimensions (1 byte each)\n                length: parseInt(hexString.substring(158, 160), 16) / 10,\n                width: parseInt(hexString.substring(160, 162), 16) / 10,\n                height: parseInt(hexString.substring(162, 164), 16) / 10,\n                \n                // Parking status (1 byte)\n                parkingStatus: parseInt(hexString.substring(164, 166), 16),\n                \n                // Direction speeds (2 bytes each)\n                xSpeed: (parseInt(hexString.substring(166, 170), 16) \u003c\u003c 16 \u003e\u003e 16) / 10,\n                ySpeed: (parseInt(hexString.substring(170, 174), 16) \u003c\u003c 16 \u003e\u003e 16) / 10,\n                \n                // Acceleration values (2 bytes each)\n                motionAccel: (parseInt(hexString.substring(174, 178), 16) \u003c\u003c 16 \u003e\u003e 16) / 100,\n                xAccel: (parseInt(hexString.substring(178, 182), 16) \u003c\u003c 16 \u003e\u003e 16) / 100,\n                yAccel: (parseInt(hexString.substring(182, 186), 16) \u003c\u003c 16 \u003e\u003e 16) / 100,\n                \n                // Location (4 bytes each)\n                longitude: parseInt(hexString.substring(186, 194), 16) / 10000000,\n                latitude: parseInt(hexString.substring(194, 202), 16) / 10000000\n            };\n\n            // Add type description\n            switch(target1.type) {\n                case 0: target1.typeDesc = \"other\"; break;\n                case 1: target1.typeDesc = \"C6\"; break;\n                case 2: target1.typeDesc = \"C6\"; break;\n                case 3: target1.typeDesc = \"tricycle\"; break;\n                case 4: target1.typeDesc = \"C5\"; break;\n                case 5: target1.typeDesc = \"C3\"; break;\n                case 6: target1.typeDesc = \"C1\"; break;\n                case 7: target1.typeDesc = \"C2\"; break;\n                case 8: target1.typeDesc = \"C4\"; break;\n                case 9: target1.typeDesc = \"C4\"; break;\n                case 10: target1.typeDesc = \"C3\"; break;\n                case 11: target1.typeDesc = \"C4\"; break;\n                case 12: target1.typeDesc = \"C4\"; break;\n                case 13: target1.typeDesc = \"person\"; break;\n                case 14: target1.typeDesc = \"c5\"; break;\n                default: target1.typeDesc = \"unknown\";\n            }\n\n            // Add color description\n            switch(target1.color) {\n                case 0: target1.colorDesc = \"other\"; break;\n                case 1: target1.colorDesc = \"white\"; break;\n                case 2: target1.colorDesc = \"gray\"; break;\n                case 3: target1.colorDesc = \"yellow\"; break;\n                case 4: target1.colorDesc = \"pink\"; break;\n                case 5: target1.colorDesc = \"red\"; break;\n                case 6: target1.colorDesc = \"purple\"; break;\n                case 7: target1.colorDesc = \"green\"; break;\n                case 8: target1.colorDesc = \"blue\"; break;\n                case 9: target1.colorDesc = \"brown\"; break;\n                case 10: target1.colorDesc = \"black\"; break;\n                default: target1.colorDesc = \"unknown\";\n            }\n\n            // Header information\n            let header = {\n                frameType: parseInt(hexString.substring(8, 10), 16),\n                checksum: parseInt(hexString.substring(10, 12), 16),\n                deviceId: hexString.substring(16, 56),\n                timestamp: hexString.substring(56, 72),\n                numberOfTargets: parseInt(hexString.substring(72, 76), 16)\n            };\n\n            msg.payload = {\n                header: header,\n                target: target1\n            };\n\n        } catch (error) {\n            msg.payload = { \n                error: \"Error parsing data: \" + error.message,\n                details: \"Error occurred while processing the hex string\"\n            };\n        }\n    } else {\n        msg.payload = { error: \"Invalid or too short payload data\" };\n    }\n} else {\n    msg.payload = { error: \"Payload not found\" };\n}\n\nreturn msg;",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  250,
        "y":  400,
        "wires":  [
                      [

                      ]
                  ]
    },
    {
        "id":  "e1bf5f7309d24c23",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 5",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  480,
        "y":  200,
        "wires":  [

                  ]
    },
    {
        "id":  "18f04cb4c55de653",
        "type":  "function",
        "z":  "e8bb17e4f6e25a56",
        "name":  "sniff only the speed only",
        "func":  "// Check if payload exists and is valid\nif (msg.payload) {\n    let hexString = msg.payload;\n\n    // if (typeof hexString === \"string\" \u0026\u0026 hexString.length \u003e= 76) {\n        try {\n            // Extract first target data section (starting at byte 39)\n            //let speed = (parseInt(hexString.substring(43, 44), 16) / 10);\n            let speed = hexString.readUInt16BE(42) / 10;\n            let speeds = parseInt(speed);\n            //  msg.payload = speed / 10;\n            // Only send the speed if it\u0027s 20 or above\n            if (speeds \u003e 20) {\n                let numStr = speeds.toString();\n\n                // Convert each digit to its ASCII value (in hex)\n                let hexDigits = numStr.split(\u0027\u0027).map(digit =\u003e digit.charCodeAt(0).toString(16).toUpperCase());\n\n                // Combine into a buffer if needed\n                msg.payload = Buffer.from(hexDigits.map(d =\u003e parseInt(d, 16)));\n                //msg.payload = parseInt(speed);\n            } else {\n                //let number = 20;\n                //let numStr = number.toString();// or you can return nothing to ignore the message\n                                // Convert each digit to its ASCII value (in hex)\n                //let hexDigits = numStr.split(\u0027\u0027).map(digit =\u003e digit.charCodeAt(0).toString(16).toUpperCase());\n\n                // Combine into a buffer if needed\n                //msg.payload = Buffer.from(hexDigits.map(d =\u003e parseInt(d, 16)));\n            }\n\n        } catch (error) {\n            msg.payload = { \n                error: \"Error parsing data: \" + error.message,\n                details: \"Error occurred while processing the hex string\"\n            };\n        }\n    // } else {\n    //     //msg.payload = { error: \"Invalid or too short payload data\" };\n    // }\n} else {\n    //msg.payload = { error: \"Payload not found\" };\n}\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  430,
        "y":  280,
        "wires":  [
                      [
                          "e1bf5f7309d24c23",
                          "d4deec9dcf210da4"
                      ]
                  ]
    },
    {
        "id":  "8e50ab9642568fee",
        "type":  "function",
        "z":  "e8bb17e4f6e25a56",
        "name":  "slow down data trigger every 5 sec",
        "func":  "// Get the current timestamp\nlet currentTime = Date.now();\n\n// Get the last allowed timestamp from context\nlet lastAllowedTime = context.get(\"lastAllowedTime\") || 0;\n\n// Set the delay time in milliseconds \nconst delayTime = 1000;\n\n// Check if enough time has passed\nif (currentTime - lastAllowedTime \u003e= delayTime) {\n    // Update the last allowed timestamp\n    context.set(\"lastAllowedTime\", currentTime);\n    \n    // Allow the data to pass\n    return msg;\n} else {\n    // Drop or hold the message\n    return null;\n}\n",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  480,
        "y":  500,
        "wires":  [
                      [
                          "1cb5d4845c520682"
                      ]
                  ]
    },
    {
        "id":  "d4deec9dcf210da4",
        "type":  "function",
        "z":  "e8bb17e4f6e25a56",
        "name":  "combine with the display",
        "func":  "// let ByteHeader = \"4c 30 31 3F 32 33 01 D4 C1 42 51 32 32 38 46 2C CA B1 CB D9 31\"\n// let ByteFotter =\"6B 6D 2F 68 0D\"\n// let Speed = msg.payload\n\n\n// return msg;\n\n// Fixed parts as buffers\nlet part1 = Buffer.from([0x4C, 0x30, 0x31, 0x3F, 0x32, 0x33, 0x01, 0xD4, 0xC1, 0x42, 0x51, 0x32, 0x32, 0x38, 0x46, 0x2C, 0xCA, 0xB1, 0xCB, 0xD9]);\nlet part3 = Buffer.from([0x6B, 0x6D, 0x2F, 0x68, 0x0D]);\n\n// Dynamic part from msg.payload (expected as a buffer)\nlet part2 = Buffer.isBuffer(msg.payload) ? msg.payload : Buffer.from(msg.payload);\n\n// Combine all parts\nlet fullBuffer = Buffer.concat([part1, part2, part3]);\n\n// Output the combined buffer\nmsg.payload = fullBuffer;\nreturn msg;",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  690,
        "y":  280,
        "wires":  [
                      [
                          "8eba46cf15e52bce",
                          "9944c15ec517dc59"
                      ]
                  ]
    },
    {
        "id":  "8eba46cf15e52bce",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 6",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  720,
        "y":  200,
        "wires":  [

                  ]
    },
    {
        "id":  "1cb5d4845c520682",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 7",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  780,
        "y":  500,
        "wires":  [

                  ]
    },
    {
        "id":  "d2caaa20bfae5d0f",
        "type":  "comment",
        "z":  "e8bb17e4f6e25a56",
        "name":  "From Radar to Display",
        "info":  "",
        "x":  140,
        "y":  100,
        "wires":  [

                  ]
    },
    {
        "id":  "20fc5bc4a589ff16",
        "type":  "tcp in",
        "z":  "e8bb17e4f6e25a56",
        "name":  "",
        "server":  "client",
        "host":  "192.168.14.11",
        "port":  "8998",
        "datamode":  "stream",
        "datatype":  "buffer",
        "newline":  "",
        "topic":  "",
        "trim":  false,
        "base64":  false,
        "tls":  "",
        "x":  160,
        "y":  200,
        "wires":  [
                      [
                          "9e6d1b1ffdff3777",
                          "2b4c769f00542766"
                      ]
                  ]
    },
    {
        "id":  "9944c15ec517dc59",
        "type":  "serial out",
        "z":  "e8bb17e4f6e25a56",
        "name":  "Radar Display TCP",
        "serial":  "499334b129b933ed",
        "x":  930,
        "y":  280,
        "wires":  [

                  ]
    },
    {
        "id":  "2b4c769f00542766",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 1",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  460,
        "y":  120,
        "wires":  [

                  ]
    },
    {
        "id":  "600b684b44c4f626",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 18",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  380,
        "y":  60,
        "wires":  [

                  ]
    },
    {
        "id":  "7b1f9940bb9b2685",
        "type":  "debug",
        "z":  "e8bb17e4f6e25a56",
        "name":  "debug 2",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  460,
        "y":  160,
        "wires":  [

                  ]
    },
    {
        "id":  "inject_start",
        "type":  "inject",
        "z":  "a732ee65fe020f24",
        "name":  "Start Recording 7AM",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "00 07 * * *",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "payloadType":  "date",
        "x":  320,
        "y":  460,
        "wires":  [
                      [
                          "exec_start"
                      ]
                  ]
    },
    {
        "id":  "exec_start",
        "type":  "exec",
        "z":  "a732ee65fe020f24",
        "command":  "/home/admin/record_rtsp.sh",
        "addpay":  false,
        "append":  "",
        "useSpawn":  "true",
        "timer":  "",
        "winHide":  false,
        "oldrc":  false,
        "name":  "Start Recording",
        "x":  520,
        "y":  460,
        "wires":  [
                      [
                          "debug_start"
                      ],
                      [

                      ],
                      [

                      ]
                  ]
    },
    {
        "id":  "debug_start",
        "type":  "debug",
        "z":  "a732ee65fe020f24",
        "name":  "Start Output",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "true",
        "targetType":  "full",
        "x":  720,
        "y":  460,
        "wires":  [

                  ]
    },
    {
        "id":  "inject_stop",
        "type":  "inject",
        "z":  "a732ee65fe020f24",
        "name":  "Stop Recording 8PM",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "00 20 * * *",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "payloadType":  "date",
        "x":  320,
        "y":  560,
        "wires":  [
                      [
                          "exec_stop"
                      ]
                  ]
    },
    {
        "id":  "exec_stop",
        "type":  "exec",
        "z":  "a732ee65fe020f24",
        "command":  "/home/admin/stop_rtsp.sh",
        "addpay":  false,
        "append":  "",
        "useSpawn":  true,
        "timer":  "",
        "oldrc":  false,
        "name":  "Stop Recording",
        "x":  520,
        "y":  560,
        "wires":  [
                      [
                          "debug_stop"
                      ],
                      [

                      ],
                      [

                      ]
                  ]
    },
    {
        "id":  "debug_stop",
        "type":  "debug",
        "z":  "a732ee65fe020f24",
        "name":  "Stop Output",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "true",
        "targetType":  "full",
        "x":  720,
        "y":  560,
        "wires":  [

                  ]
    },
    {
        "id":  "6c2ddd0734c727b5",
        "type":  "tcp in",
        "z":  "19b3c3c4c41722e8",
        "name":  "",
        "server":  "client",
        "host":  "192.168.14.11",
        "port":  "8998",
        "datamode":  "stream",
        "datatype":  "buffer",
        "newline":  "",
        "topic":  "",
        "trim":  false,
        "base64":  false,
        "tls":  "",
        "x":  160,
        "y":  280,
        "wires":  [
                      [
                          "d5db1b12782c0f13",
                          "7a92af94e6d3f8ac",
                          "01807809ab010e1a",
                          "0152502b661c19e7",
                          "ca29f0eba8ada6f8",
                          "fed31a11fb2f7176"
                      ]
                  ]
    },
    {
        "id":  "d5db1b12782c0f13",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 13",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  360,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "ca29f0eba8ada6f8",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "name":  "Lane Status",
        "func":  "const buffer = msg.payload;\n\n// Validate header/footer\nif (\n    buffer[0] !== 0x55 || buffer[1] !== 0xAA || buffer[2] !== 0x55 || buffer[3] !== 0xBB ||\n    buffer[buffer.length - 4] !== 0x55 || buffer[buffer.length - 3] !== 0xCC ||\n    buffer[buffer.length - 2] !== 0x55 || buffer[buffer.length - 1] !== 0xDD\n) {\n    return null;\n}\n\n// Only proceed if frame type is 0x04\nconst frameType = buffer[4];\nif (frameType !== 0x04) {\n    return null;\n}\n\n// Extract device info and timestamp\nconst deviceId = buffer.slice(8, 28).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027);\nconst timestamp = buffer.slice(28, 36).readBigUInt64BE();\nconst timestampDate = new Date(Number(timestamp));\nconst numEntries = buffer.readUInt16BE(36);\n\n// Parse entries\nconst entries = [];\nfor (let i = 0; i \u003c numEntries; i++) {\n    const base = 38 + i * 34;\n    if (base + 34 \u003e buffer.length - 4) break;\n\n    entries.push({\n        laneNo: buffer.readUInt16BE(base),\n        queueLengthM: buffer.readUInt16BE(base + 2) / 10,\n        queueHeadM: buffer.readUInt16BE(base + 4) / 10,\n        queueTailM: buffer.readUInt16BE(base + 6) / 10,\n        vehiclesInQueue: buffer.readUInt16BE(base + 8),\n        exceedsLimit: buffer[base + 10] === 1,\n        overflow: buffer[base + 11] === 1,\n        vehicleSpacingM: buffer.readUInt16BE(base + 12) / 10,\n        vehiclesOnline: buffer.readUInt16BE(base + 14),\n        averageSpeedKmh: buffer.readUInt16BE(base + 16) / 10,\n        speed85thKmh: buffer.readUInt16BE(base + 18) / 10,\n        leadVehiclePosM: buffer.readUInt16BE(base + 20) / 10,\n        leadVehicleSpeedKmh: buffer.readUInt16BE(base + 22) / 10,\n        trailVehiclePosM: buffer.readUInt16BE(base + 24) / 10,\n        trailVehicleSpeedKmh: buffer.readUInt16BE(base + 26) / 10,\n        spaceOccupancyPercent: buffer.readUInt16BE(base + 28) / 10,\n        reserved: buffer.slice(base + 30, base + 32).toString(\u0027hex\u0027)\n    });\n}\nmsg.topic = \"sss/lane/status\"\n// Final output\nmsg.payload = {\n    gatewayID: \"0250f4000000\",\n    deviceId,\n    frameType: \"LaneStatusData\",\n    timestamp: timestampDate.toISOString(),\n    numEntries,\n    entries,\n    raw: buffer.toString(\u0027hex\u0027).toUpperCase()\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  410,
        "y":  300,
        "wires":  [
                      [
                          "f8d058ce457e57e2",
                          "124731794a305244",
                          "7904136a1fb9a41e"
                      ]
                  ]
    },
    {
        "id":  "0152502b661c19e7",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "name":  "Traffic Data",
        "func":  "const buffer = msg.payload;\n\nif (\n    buffer[0] !== 0x55 || buffer[1] !== 0xAA || buffer[2] !== 0x55 || buffer[3] !== 0xBB ||\n    buffer.at(-4) !== 0x55 || buffer.at(-3) !== 0xCC || buffer.at(-2) !== 0x55 || buffer.at(-1) !== 0xDD\n) return null;\n\nif (buffer[4] !== 0x03) return null;\n\nconst deviceId = buffer.slice(8, 28).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027);\nconst timestamp = buffer.slice(28, 36).readBigUInt64BE();\nconst timestampDate = new Date(Number(timestamp));\nconst numEntries = buffer.readUInt16BE(36);\nconst entries = [];\n\nfor (let i = 0; i \u003c numEntries; i++) {\n    const base = 38 + i * 50;\n    if (base + 50 \u003e buffer.length - 4) break;\n\n    entries.push({\n        statisticalPeriodSec: buffer.readUInt16BE(base),\n        targetLane: buffer.readUInt16BE(base + 2),\n        monitoringLocationM: buffer.readUInt16BE(base + 4) / 10,\n        bicycleFlow: buffer.readUInt16BE(base + 6),\n        motorcycleFlow: buffer.readUInt16BE(base + 8),\n        tricycleFlow: buffer.readUInt16BE(base + 10),\n        busFlow: buffer.readUInt16BE(base + 12),\n        vanFlow: buffer.readUInt16BE(base + 14),\n        carFlow: buffer.readUInt16BE(base + 16),\n        suvFlow: buffer.readUInt16BE(base + 18),\n        largeTruckFlow: buffer.readUInt16BE(base + 20),\n        mediumTruckFlow: buffer.readUInt16BE(base + 22),\n        lightTruckFlow: buffer.readUInt16BE(base + 24),\n        hazmatFlow: buffer.readUInt16BE(base + 26),\n        engineeringFlow: buffer.readUInt16BE(base + 28),\n        pedestrianFlow: buffer.readUInt16BE(base + 30),\n        totalFlow: buffer.readUInt16BE(base + 32),\n        averageSpeedKmh: buffer.readUInt16BE(base + 34) / 10,\n        headwaySec: buffer.readUInt16BE(base + 36),\n        loopOccupancyPercent: buffer.readUInt16BE(base + 38) / 10,\n        maxQueueLengthM: buffer.readUInt16BE(base + 40) / 10,\n        laneOccupancyPercent: buffer.readUInt16BE(base + 42) / 10,\n        vehicleSpacingM: buffer.readUInt16BE(base + 44) / 10,\n        trafficDensity: buffer.readUInt16BE(base + 46) / 10,\n        reserved: buffer.slice(base + 48, base + 50).toString(\u0027hex\u0027)\n    });\n}\nmsg.topic = \"sss/traffic/data\"\nmsg.payload = {\n    gatewayID: \"0250f4000000\",\n    deviceId,\n    frameType: \"TrafficData\",\n    timestamp: timestampDate.toISOString(),\n    numEntries,\n    entries,\n    raw: buffer.toString(\u0027hex\u0027).toUpperCase()\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  410,
        "y":  260,
        "wires":  [
                      [
                          "87484b8f66d74de2",
                          "124731794a305244",
                          "7904136a1fb9a41e"
                      ]
                  ]
    },
    {
        "id":  "01807809ab010e1a",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "name":  "Region Data",
        "func":  "const buffer = msg.payload;\n\nif (\n    buffer[0] !== 0x55 || buffer[1] !== 0xAA || buffer[2] !== 0x55 || buffer[3] !== 0xBB ||\n    buffer.at(-4) !== 0x55 || buffer.at(-3) !== 0xCC || buffer.at(-2) !== 0x55 || buffer.at(-1) !== 0xDD\n) return null;\n\nif (buffer[4] !== 0x02) return null;\n\nconst deviceId = buffer.slice(8, 28).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027);\nconst timestamp = buffer.slice(28, 36).readBigUInt64BE();\nconst timestampDate = new Date(Number(timestamp));\nconst numEntries = buffer.readUInt16BE(36);\nconst entries = [];\n\nfor (let i = 0; i \u003c numEntries; i++) {\n    const base = 38 + i * 12;\n    if (base + 12 \u003e buffer.length - 4) break;\n\n    entries.push({\n        statisticalPeriodSec: buffer.readUInt16BE(base),\n        directionBelonging: buffer.readUInt16BE(base + 2),\n        leftTurnPercent: buffer.readUInt16BE(base + 4) / 10,\n        straightPercent: buffer.readUInt16BE(base + 6) / 10,\n        rightTurnPercent: buffer.readUInt16BE(base + 8) / 10,\n        reserved: buffer.slice(base + 10, base + 12).toString(\u0027hex\u0027)\n    });\n}\nmsg.topic = \"sss/machine/data\"\nmsg.payload = {\n    gatewayID:\"0250f4000000\",\n    deviceId,\n    frameType: \"RegionData\",\n    timestamp: timestampDate.toISOString(),\n    numEntries,\n    entries,\n    raw: buffer.toString(\u0027hex\u0027).toUpperCase()\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  410,
        "y":  220,
        "wires":  [
                      [
                          "933cdbff4372a677",
                          "124731794a305244",
                          "7904136a1fb9a41e"
                      ]
                  ]
    },
    {
        "id":  "fed31a11fb2f7176",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "name":  "Pass Data",
        "func":  "const buffer = msg.payload;\n\nif (\n    buffer[0] !== 0x55 || buffer[1] !== 0xAA || buffer[2] !== 0x55 || buffer[3] !== 0xBB ||\n    buffer.at(-4) !== 0x55 || buffer.at(-3) !== 0xCC || buffer.at(-2) !== 0x55 || buffer.at(-1) !== 0xDD\n) return null;\n\nif (buffer[4] !== 0x05) return null;\n\nconst deviceId = buffer.slice(8, 28).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027);\nconst timestamp = buffer.slice(28, 36).readBigUInt64BE();\nconst timestampDate = new Date(Number(timestamp));\nconst numEntries = buffer.readUInt16BE(36);\nconst entries = [];\n\nfor (let i = 0; i \u003c numEntries; i++) {\n    const base = 38 + i * 22;\n    if (base + 22 \u003e buffer.length - 4) break;\n\n    const passingTime = buffer.slice(base + 8, base + 16).readBigUInt64BE();\n\n    entries.push({\n        laneNo: buffer.readUInt16BE(base),\n        crossSectionPosM: buffer.readUInt16BE(base + 2) / 10,\n        speedKmh: buffer.readUInt16BE(base + 4) / 10,\n        headwaySec: buffer.readUInt16BE(base + 6),\n        passingTime: new Date(Number(passingTime)).toISOString(),\n        occupancyDurationSec: buffer.readUInt16BE(base + 16),\n        occupancyStatus: buffer[base + 18],\n        reserved: buffer.slice(base + 19, base + 22).toString(\u0027hex\u0027)\n    });\n}\nmsg.topic = \"sss/pass/data\"\nmsg.payload = {\n    gatewayID: \"0250f4000000\",\n    deviceId,\n    frameType: \"PassData\",\n    timestamp: timestampDate.toISOString(),\n    numEntries,\n    entries,\n    raw: buffer.toString(\u0027hex\u0027).toUpperCase()\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  410,
        "y":  340,
        "wires":  [
                      [
                          "f388ce03e56385fb",
                          "124731794a305244",
                          "7904136a1fb9a41e"
                      ]
                  ]
    },
    {
        "id":  "7a92af94e6d3f8ac",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "name":  "Object Data",
        "func":  "const buffer = msg.payload;\n\nif (\n    buffer[0] !== 0x55 || buffer[1] !== 0xAA || buffer[2] !== 0x55 || buffer[3] !== 0xBB ||\n    buffer.at(-4) !== 0x55 || buffer.at(-3) !== 0xCC || buffer.at(-2) !== 0x55 || buffer.at(-1) !== 0xDD\n) return null;\n\nif (buffer[4] !== 0x01) return null;\n\nconst deviceId = buffer.slice(8, 28).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027);\nconst timestamp = buffer.slice(28, 36).readBigUInt64BE();\nconst timestampDate = new Date(Number(timestamp));\nconst numEntries = buffer.readUInt16BE(36);\nconst entries = [];\n\nfor (let i = 0; i \u003c numEntries; i++) {\n    const base = 38 + i * 66;\n    if (base + 66 \u003e buffer.length - 4) break;\n\n    entries.push({\n        targetId: `${buffer.slice(base, base + 8).readBigUInt64BE()}_${buffer.readUInt16BE(base + 8)}`,\n        laneNo: buffer[base + 10],\n        targetType: buffer[base + 11],\n        color: buffer[base + 12],\n        plateNumber: buffer.slice(base + 13, base + 25).toString(\u0027ascii\u0027).replace(/\\0/g, \u0027\u0027),\n        xCoordM: buffer.readInt16BE(base + 25) / 10,\n        yCoordM: buffer.readInt16BE(base + 27) / 10,\n        speedKmh: buffer.readInt16BE(base + 29) / 10,\n        imageX: buffer.readInt16BE(base + 31),\n        imageY: buffer.readInt16BE(base + 33),\n        pixelHeight: buffer.readInt16BE(base + 35),\n        pixelWidth: buffer.readInt16BE(base + 37),\n        azimuthDeg: buffer.readInt16BE(base + 39) / 10,\n        lengthM: buffer[base + 41] / 10,\n        widthM: buffer[base + 42] / 10,\n        heightM: buffer[base + 43] / 10,\n        parked: buffer[base + 44] === 1,\n        speedX: buffer.readInt16BE(base + 45) / 10,\n        speedY: buffer.readInt16BE(base + 47) / 10,\n        accelDir: buffer.readInt16BE(base + 49) / 100,\n        accelX: buffer.readInt16BE(base + 51) / 100,\n        accelY: buffer.readInt16BE(base + 53) / 100,\n        longitude: buffer.readInt32BE(base + 55) * 1e-7,\n        latitude: buffer.readInt32BE(base + 59) * 1e-7,\n        reserved: buffer.slice(base + 63, base + 65).toString(\u0027hex\u0027)\n    });\n}\nmsg.topic = \"sss/object/data\"\nmsg.payload = {\n    gatewayID: \"0250f4000000\",\n    deviceId,\n    frameType: \"ObjectData\",\n    timestamp: timestampDate.toISOString(),\n    numEntries,\n    entries,\n    raw: buffer.toString(\u0027hex\u0027).toUpperCase()\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  410,
        "y":  180,
        "wires":  [
                      [
                          "5bb44cf259f8bd22",
                          "124731794a305244",
                          "7904136a1fb9a41e"
                      ]
                  ]
    },
    {
        "id":  "5bb44cf259f8bd22",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 20",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  740,
        "y":  180,
        "wires":  [

                  ]
    },
    {
        "id":  "933cdbff4372a677",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 21",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  740,
        "y":  220,
        "wires":  [

                  ]
    },
    {
        "id":  "87484b8f66d74de2",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 22",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  740,
        "y":  260,
        "wires":  [

                  ]
    },
    {
        "id":  "f388ce03e56385fb",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 24",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  740,
        "y":  340,
        "wires":  [

                  ]
    },
    {
        "id":  "f8d058ce457e57e2",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "name":  "debug 23",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  740,
        "y":  300,
        "wires":  [

                  ]
    },
    {
        "id":  "22e468862edcbab7",
        "type":  "inject",
        "z":  "19b3c3c4c41722e8",
        "name":  "Inject Test Data",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "payload":  "{\"header\":{\"frameType\":5,\"checksum\":48,\"deviceId\":\"5353535f4b75616c614c69706973310000000000\",\"timestamp\":\"2025-08-18T11:04:18.771Z\",\"numberOfTargets\":1},\"target\":{\"lane\":11,\"class\":\"C3\",\"speed\":55}}",
        "payloadType":  "json",
        "x":  300,
        "y":  540,
        "wires":  [
                      [
                          "124731794a305244",
                          "b32aa7593bdfbe5b"
                      ]
                  ]
    },
    {
        "id":  "124731794a305244",
        "type":  "function",
        "z":  "19b3c3c4c41722e8",
        "d":  true,
        "name":  "Build Daily Path",
        "func":  "let now = new Date();\nlet dateStr = now.toISOString().split(\"T\")[0];  // YYYY-MM-DD\n\n// Pick folder name dynamically based on frameType\nlet frameType = msg.payload.frameType || \"UnknownData\";  \nlet folder = \"/mnt/ssd/\" + frameType + \"/\" + dateStr;\nlet filename = folder + \"/data.json\";\n\n// Wrap record with timestamp\nlet record = {\n    timestamp: now.toISOString(),\n    data: msg.payload\n};\n\nmsg.filename = filename;\nmsg.payload = JSON.stringify(record) + \"\\n\";\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  560,
        "y":  540,
        "wires":  [
                      [
                          "b3d27894a9133b22",
                          "b32aa7593bdfbe5b"
                      ]
                  ]
    },
    {
        "id":  "b3d27894a9133b22",
        "type":  "file",
        "z":  "19b3c3c4c41722e8",
        "d":  true,
        "name":  "Write to SSD",
        "filename":  "filename",
        "filenameType":  "msg",
        "appendNewline":  false,
        "createDir":  true,
        "overwriteFile":  "false",
        "encoding":  "none",
        "x":  790,
        "y":  540,
        "wires":  [
                      [

                      ]
                  ]
    },
    {
        "id":  "b32aa7593bdfbe5b",
        "type":  "debug",
        "z":  "19b3c3c4c41722e8",
        "d":  true,
        "name":  "Debug Output",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "true",
        "targetType":  "full",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  620,
        "y":  460,
        "wires":  [

                  ]
    },
    {
        "id":  "06d983564e80fa76",
        "type":  "comment",
        "z":  "19b3c3c4c41722e8",
        "name":  "save data /mnt/ssd/paadData",
        "info":  "",
        "x":  320,
        "y":  460,
        "wires":  [

                  ]
    },
    {
        "id":  "7904136a1fb9a41e",
        "type":  "mqtt out",
        "z":  "19b3c3c4c41722e8",
        "name":  "",
        "topic":  "",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "bbef3c3cecc6faf8",
        "x":  670,
        "y":  120,
        "wires":  [

                  ]
    },
    {
        "id":  "a9f255039c7317e8",
        "type":  "tab",
        "label":  "FLOOD - Distance Sensor",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "aabbaecce1b00e2a",
        "type":  "tab",
        "label":  "FLOOD - Camera Snapshoot",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "b0eb2326195c59f2",
        "type":  "tab",
        "label":  "FLOOD - Speaker",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "d3dfdfd513fb0aa2",
        "type":  "tab",
        "label":  "FLOOD - Solar Battery Status",
        "disabled":  false,
        "info":  ""
    },
    {
        "id":  "9071ee17a216293a",
        "type":  "tab",
        "label":  "FLOOD - Tipping Sensor",
        "disabled":  false,
        "info":  "",
        "env":  [

                ]
    },
    {
        "id":  "8f1bccb954c87175",
        "type":  "group",
        "z":  "d3dfdfd513fb0aa2",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "0870edf5488db2a6",
                      "f69ef20e49fd5e67",
                      "ae3ca7f3c39fa801"
                  ],
        "x":  74,
        "y":  339,
        "w":  632,
        "h":  82
    },
    {
        "id":  "9b60db2e6429cd60",
        "type":  "group",
        "z":  "d3dfdfd513fb0aa2",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "9efa28ef98cd5407",
                      "f0f34b43162e28ff",
                      "49e26240e82539d0",
                      "02420378b682d2a9",
                      "ff4e245b16e85dab",
                      "ba3f955836dd6411",
                      "b2faa1afe512a80c",
                      "8a9d785e6a5edac1",
                      "5cfb238b3a200525",
                      "0f9698fea83a10c4",
                      "81f3c0c393123c1a",
                      "4e3d7ac33429ccbe",
                      "5f7aa11225841d0b",
                      "b2f915bd6db41bb9",
                      "2dd81a5f0623505b"
                  ],
        "x":  74,
        "y":  19,
        "w":  1032,
        "h":  302
    },
    {
        "id":  "1bbb998942558785",
        "type":  "group",
        "z":  "d3dfdfd513fb0aa2",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "7708ede44e016d0a",
                      "a01ae8ea72715992",
                      "e563708f3023885b",
                      "eec3995c4100cde7",
                      "80565d49ed58925c",
                      "1be0298cc11e5371"
                  ],
        "x":  74,
        "y":  439,
        "w":  472,
        "h":  202
    },
    {
        "id":  "61ecca2b80ffb9e0",
        "type":  "group",
        "z":  "a9f255039c7317e8",
        "name":  "Distance Sensor Logic",
        "style":  {
                      "label":  true
                  },
        "nodes":  [
                      "24aa1d8cd147705a",
                      "5b10600432117ce2",
                      "1f445079931c2895",
                      "9942181679d22edb",
                      "3a80a35a6f085a3f",
                      "0e4076f7d5f7fb98",
                      "686538b93b1a33be"
                  ],
        "x":  34,
        "y":  39,
        "w":  632,
        "h":  262
    },
    {
        "id":  "8d52cfa95701d1f6",
        "type":  "group",
        "z":  "aabbaecce1b00e2a",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "665e5d2798cef93b",
                      "d6b682e56e47c08c"
                  ],
        "x":  94,
        "y":  399,
        "w":  472,
        "h":  82
    },
    {
        "id":  "bb0cc219db80aa46",
        "type":  "group",
        "z":  "aabbaecce1b00e2a",
        "style":  {
                      "stroke":  "#999999",
                      "stroke-opacity":  "1",
                      "fill":  "none",
                      "fill-opacity":  "1",
                      "label":  true,
                      "label-position":  "nw",
                      "color":  "#a4a4a4"
                  },
        "nodes":  [
                      "91c8c9203ef24cc4",
                      "2a7dcb147e1bce7d",
                      "c3ac1ee5c473a524",
                      "27c4b540989b8bb4",
                      "7d08364daae97b02",
                      "65e5bea195d79742",
                      "08fd8f8992fba0a1",
                      "972d912a7db782e7",
                      "7c3771ed37a25f87",
                      "fb0c6f13359e20f3"
                  ],
        "x":  94,
        "y":  179,
        "w":  1012,
        "h":  207
    },
    {
        "id":  "c1f924b2eff6c07a",
        "type":  "group",
        "z":  "b0eb2326195c59f2",
        "name":  "Manual Test",
        "style":  {
                      "label":  true
                  },
        "nodes":  [
                      "1",
                      "a1d841602e6b1968"
                  ],
        "x":  34,
        "y":  19,
        "w":  492,
        "h":  82
    },
    {
        "id":  "89f6554eadeaf202",
        "type":  "group",
        "z":  "b0eb2326195c59f2",
        "name":  "Speaker Logic",
        "style":  {
                      "label":  true
                  },
        "nodes":  [
                      "8ae21ac7dbe4b582",
                      "7d23a6db0409c5b3",
                      "fa2f7ffd6472b54e",
                      "ee66ed6c42a9719c",
                      "71664a156fed443c",
                      "9aec2f9041b3fedc",
                      "06761c5803b7da94",
                      "c98f629e0adeb021",
                      "3bef8afbac187647",
                      "d0965ccf1ebc3a65",
                      "03d7fbb3a4decebb",
                      "970b04d56e4d5a7b",
                      "4d69b9971b187965",
                      "15a7048efb16c6a6",
                      "2948eb0d9e3c819f",
                      "c4e364564139d2b4",
                      "98bb99a91bc910d2",
                      "51a3da1b50ecd7b1"
                  ],
        "x":  34,
        "y":  119,
        "w":  952,
        "h":  482
    },
    {
        "id":  "109a5214842acafe",
        "type":  "group",
        "z":  "9071ee17a216293a",
        "name":  "Rain Logic v2",
        "style":  {
                      "label":  true
                  },
        "nodes":  [
                      "319c1fe4768ca6de",
                      "3204f791fa664ace",
                      "5758f65c54c6980e",
                      "d55cd34d1bb40bde",
                      "e76c5fac03f25395",
                      "78cc5b820a41572a",
                      "30eaf86bb2bab5c7",
                      "1d4974c2ad58e0d9",
                      "51ac74c52f6a4023"
                  ],
        "x":  14,
        "y":  39,
        "w":  1072,
        "h":  202
    },
    {
        "id":  "7459e1c0f90208e3",
        "type":  "serial-port",
        "z":  "d3dfdfd513fb0aa2",
        "name":  "solar-batery",
        "serialport":  "/dev/ttyS0",
        "serialbaud":  "9600",
        "databits":  "8",
        "parity":  "none",
        "stopbits":  "1",
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "200",
        "bin":  "bin",
        "out":  "time",
        "addchar":  "",
        "responsetimeout":  "10000"
    },
    {
        "id":  "9e490f20ec5dd3a7",
        "type":  "serial-port",
        "name":  "",
        "serialport":  "/dev/ttyS3",
        "serialbaud":  "4800",
        "databits":  "8",
        "parity":  "none",
        "stopbits":  "1",
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "0",
        "bin":  "bin",
        "out":  "time",
        "addchar":  "",
        "responsetimeout":  "10000"
    },
    {
        "id":  "ad38133a844d12e3",
        "type":  "mqtt-broker",
        "name":  "cloud.lightsol.net",
        "broker":  "cloud.lightsol.net",
        "port":  1883,
        "clientid":  "",
        "autoConnect":  true,
        "usetls":  false,
        "protocolVersion":  4,
        "keepalive":  60,
        "cleansession":  true,
        "autoUnsubscribe":  true,
        "birthTopic":  "",
        "birthQos":  "0",
        "birthRetain":  "false",
        "birthPayload":  "",
        "birthMsg":  {

                     },
        "closeTopic":  "",
        "closeQos":  "0",
        "closeRetain":  "false",
        "closePayload":  "",
        "closeMsg":  {

                     },
        "willTopic":  "",
        "willQos":  "0",
        "willRetain":  "false",
        "willPayload":  "",
        "willMsg":  {

                    },
        "userProps":  "",
        "sessionExpiry":  ""
    },
    {
        "id":  "1de5c39d805c3d29",
        "type":  "serial-port",
        "name":  "",
        "serialport":  "/dev/ttyUSB4",
        "serialbaud":  "57600",
        "databits":  8,
        "parity":  "none",
        "stopbits":  1,
        "waitfor":  "",
        "dtr":  "none",
        "rts":  "none",
        "cts":  "none",
        "dsr":  "none",
        "newline":  "\\n",
        "bin":  "false",
        "out":  "char",
        "addchar":  "",
        "responsetimeout":  10000
    },
    {
        "id":  "c211b55193ae2e61",
        "type":  "ui_base",
        "theme":  {
                      "name":  "theme-light",
                      "lightTheme":  {
                                         "default":  "#0094CE",
                                         "baseColor":  "#0094CE",
                                         "baseFont":  "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                                         "edited":  false
                                     },
                      "darkTheme":  {
                                        "default":  "#097479",
                                        "baseColor":  "#097479",
                                        "baseFont":  "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                                        "edited":  false
                                    },
                      "customTheme":  {
                                          "name":  "Untitled Theme 1",
                                          "default":  "#4B7930",
                                          "baseColor":  "#4B7930",
                                          "baseFont":  "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                                      },
                      "themeState":  {
                                         "base-color":  {
                                                            "default":  "#0094CE",
                                                            "value":  "#0094CE",
                                                            "edited":  false
                                                        },
                                         "page-titlebar-backgroundColor":  {
                                                                               "value":  "#0094CE",
                                                                               "edited":  false
                                                                           },
                                         "page-backgroundColor":  {
                                                                      "value":  "#fafafa",
                                                                      "edited":  false
                                                                  },
                                         "page-sidebar-backgroundColor":  {
                                                                              "value":  "#ffffff",
                                                                              "edited":  false
                                                                          },
                                         "group-textColor":  {
                                                                 "value":  "#1bbfff",
                                                                 "edited":  false
                                                             },
                                         "group-borderColor":  {
                                                                   "value":  "#ffffff",
                                                                   "edited":  false
                                                               },
                                         "group-backgroundColor":  {
                                                                       "value":  "#ffffff",
                                                                       "edited":  false
                                                                   },
                                         "widget-textColor":  {
                                                                  "value":  "#111111",
                                                                  "edited":  false
                                                              },
                                         "widget-backgroundColor":  {
                                                                        "value":  "#0094ce",
                                                                        "edited":  false
                                                                    },
                                         "widget-borderColor":  {
                                                                    "value":  "#ffffff",
                                                                    "edited":  false
                                                                },
                                         "base-font":  {
                                                           "value":  "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                                                       }
                                     },
                      "angularTheme":  {
                                           "primary":  "indigo",
                                           "accents":  "blue",
                                           "warn":  "red",
                                           "background":  "grey",
                                           "palette":  "light"
                                       }
                  },
        "site":  {
                     "name":  "Node-RED Dashboard",
                     "hideToolbar":  "false",
                     "allowSwipe":  "false",
                     "lockMenu":  "false",
                     "allowTempTheme":  "true",
                     "dateFormat":  "DD/MM/YYYY",
                     "sizes":  {
                                   "sx":  48,
                                   "sy":  48,
                                   "gx":  6,
                                   "gy":  6,
                                   "cx":  6,
                                   "cy":  6,
                                   "px":  0,
                                   "py":  0
                               }
                 }
    },
    {
        "id":  "2d855a26519f9f93",
        "type":  "ui_tab",
        "name":  "Camera",
        "icon":  "camera",
        "disabled":  false,
        "hidden":  false
    },
    {
        "id":  "e183b56a98787c57",
        "type":  "ui_group",
        "name":  "Milesight Snapshot",
        "tab":  "2d855a26519f9f93",
        "order":  1,
        "disp":  true,
        "width":  "8",
        "collapse":  false
    },
    {
        "id":  "24aa1d8cd147705a",
        "type":  "debug",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "Raw Distance",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  140,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "5b10600432117ce2",
        "type":  "function",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "Outputs if more than 10 objects",
        "func":  "// Input: ASCII like \"4:426\"\n// If ID (left side) \u003c 10, publish an immediate alarm JSON to MQTT.\n\nconst TOPIC = \"bv26/radar/data\";\nconst GATEWAY = \"a0:19:b2:d2:7a:96\";\nconst DEVTYPE = \"FMK\";\n\nlet s = msg.payload;\nif (Buffer.isBuffer(s)) s = s.toString(\"utf8\");\nif (typeof s !== \"string\") s = String(s);\ns = s.trim();\n\nlet idPart = null, distanceVal = null;\nif (s.includes(\":\")) {\n    const [idStr, distStr] = s.split(\":\");\n    idPart = parseInt(idStr, 10);\n    distanceVal = distStr;\n}\n\nif (Number.isInteger(idPart) \u0026\u0026 idPart \u003c 10) {\n    const out = {\n        gateway: GATEWAY,\n        devType: DEVTYPE,\n        cmd: \"alarm\",\n        timestamp: Math.floor(Date.now() / 1000),\n        distance: distanceVal\n    };\n    return { topic: TOPIC, payload: out };\n}\n\n// No output if condition not met\nreturn null;\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  390,
        "y":  120,
        "wires":  [
                      [
                          "1f445079931c2895"
                      ]
                  ]
    },
    {
        "id":  "1f445079931c2895",
        "type":  "debug",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "\u003e10 Alarm",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  460,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "9942181679d22edb",
        "type":  "mqtt out",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "",
        "topic":  "",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  590,
        "y":  260,
        "wires":  [

                  ]
    },
    {
        "id":  "0e4076f7d5f7fb98",
        "type":  "function",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "Water Level Check",
        "func":  "/************ CONFIG ************/\nconst WINDOW_FRAMES = 120;\nconst WATER_DELTA_MIN_CM = 5;\nconst MAX_BASELINE_STEP_CM = 0.5;\nconst NEAR_STABILITY_WIN = 6;\nconst VAR_MAX_CM = 2.0;\nconst IGNORE_CLOSER_THAN_CM = 3;\nconst MAX_RANGE_CM = 1000;\nconst Z_REJECT = 3.0;\nconst FLATNESS_TOL_CM = 3.0;\nconst MIN_IDS_FOR_WATER = 2;\n\n// Output config\nconst TOPIC = \"bv35/radar/data\";\nconst GATEWAY = \"7a:4b:ff:38:c2:b0\";\nconst DEVTYPE = \"FMK\";\nconst DEBUG_MODE = false;      // \u003c\u003c\u003c set false for alarm-only output\nconst PUBLISH_INTERVAL_MS = 5 * 60 * 1000; // 5 minutes\n\n/************ Helpers ************/\nfunction toDistancesById(payload) {\n  const out = {};\n  if (typeof payload === \"string\") {\n    const items = payload.split(/[\\n,]+/).map(s =\u003e s.trim()).filter(Boolean);\n    for (const it of items) {\n      const m = it.match(/^(\\d+)\\s*:\\s*([+-]?\\d+(\\.\\d+)?)$/);\n      if (m) {\n        out[m[1]] = parseFloat(m[2]);\n      }\n    }\n    return Object.keys(out).length ? out : null;\n  }\n  return null;\n}\n\nfunction mean(arr) { return arr.length ? arr.reduce((s, x) =\u003e s + x, 0) / arr.length : 0; }\nfunction stdev(arr) { if (arr.length \u003c 2) return 0; const m = mean(arr); return Math.sqrt(mean(arr.map(x =\u003e (x - m) ** 2))); }\nfunction pushBounded(arr, x, max) { arr.push(x); if (arr.length \u003e max) arr.shift(); }\nfunction pushOutlierGuard(arr, x, max) {\n  if (arr.length \u003e= 5) {\n    const m = mean(arr), sd = stdev(arr);\n    if (sd \u003e 0) {\n      const z = Math.abs((x - m) / sd);\n      if (z \u003e Z_REJECT) return; // drop spike\n    }\n  }\n  pushBounded(arr, x, max);\n}\n\n/************ State ************/\nlet state = context.get(\"state\") || { perId: {}, lastPublish: 0 };\n\n/************ MAIN ************/\nconst distById = toDistancesById(msg.payload);\nif (!distById) { node.warn(\"No distances parsed\"); return null; }\n\nconst ids = Object.keys(distById).map(id =\u003e parseInt(id, 10)).sort((a, b) =\u003e a - b);\nif (ids.length === 0) { node.warn(\"Empty frame\"); return null; }\n\nlet waterCandidates = [];\nlet outputPerId = {};\n\n/*** Process each ID independently ***/\nfor (const id of ids) {\n  let d = distById[id];\n  if (!(d \u003e= IGNORE_CLOSER_THAN_CM \u0026\u0026 d \u003c= MAX_RANGE_CM)) continue;\n\n  if (!state.perId[id]) {\n    state.perId[id] = {\n      baseline: null,\n      nearestHistory: [],\n      farthestHistory: []\n    };\n  }\n  const st = state.perId[id];\n\n  // Update rolling history\n  pushOutlierGuard(st.nearestHistory, d, WINDOW_FRAMES);\n  pushOutlierGuard(st.farthestHistory, d, WINDOW_FRAMES);\n\n  const nearest = Math.min(...st.nearestHistory);\n  const farthest = Math.max(...st.farthestHistory);\n\n  // Update baseline (slowly follows farthest)\n  if (st.baseline == null) {\n    st.baseline = farthest;\n  } else {\n    const delta = farthest - st.baseline;\n    if (Math.abs(delta) \u003c= MAX_BASELINE_STEP_CM) {\n      st.baseline += delta;\n    } else {\n      st.baseline += Math.sign(delta) * MAX_BASELINE_STEP_CM;\n    }\n  }\n\n  // Detect water (per-ID)\n  let waterHeight = 0, confidence = 0, isWater = false;\n  if (st.baseline != null) {\n    const delta = st.baseline - d;\n    const recent = st.nearestHistory.slice(-NEAR_STABILITY_WIN);\n    const recentSd = stdev(recent);\n\n    const candidate = delta \u003e= WATER_DELTA_MIN_CM;\n    const stable = recentSd \u003c= VAR_MAX_CM;\n\n    if (candidate \u0026\u0026 stable) {\n      waterHeight = Math.max(0, delta);\n      const deltaScore = Math.min(1, delta / 50);\n      const stabilityScore = Math.max(0, 1 - (recentSd / VAR_MAX_CM));\n      confidence = Math.min(1, 0.6 * deltaScore + 0.4 * stabilityScore);\n      isWater = confidence \u003e= 0.5;\n      waterCandidates.push({ id, waterHeight, confidence });\n    }\n  }\n\n  outputPerId[id] = {\n    distanceCm: d,\n    baselineCm: st.baseline,\n    waterHeightCm: waterHeight,\n    isWater,\n    confidence\n  };\n}\n\n/*** Flatness check across IDs ***/\nlet globalWaterHeight = 0, globalConfidence = 0, isWater = false;\nif (waterCandidates.length \u003e= MIN_IDS_FOR_WATER) {\n  const heights = waterCandidates.map(w =\u003e w.waterHeight);\n  const flatness = stdev(heights);\n  if (flatness \u003c= FLATNESS_TOL_CM) {\n    globalWaterHeight = mean(heights);\n    globalConfidence = mean(waterCandidates.map(w =\u003e w.confidence));\n    isWater = globalConfidence \u003e= 0.5;\n  }\n}\n\n/*** Final Output ***/\nlet out;\nif (DEBUG_MODE) {\n  out = {\n    perId: outputPerId,\n    global: {\n      isWater,\n      waterHeightCm: Number(globalWaterHeight.toFixed(2)),\n      confidence: Number(globalConfidence.toFixed(2)),\n      idsChecked: ids.length,\n      idsWater: waterCandidates.length\n    }\n  };\n} else {\n  out = {\n    gateway: GATEWAY,\n    devType: DEVTYPE,\n    cmd: \"water\",\n    timestamp: Math.floor(Date.now() / 1000),\n    distance: Number(globalWaterHeight.toFixed(2))\n  };\n}\n\n/*** Publish only every 5 min ***/\nconst now = Date.now();\nif (now - state.lastPublish \u003e= PUBLISH_INTERVAL_MS) {\n  state.lastPublish = now;\n  context.set(\"state\", state);\n  return { topic: TOPIC, payload: out };\n} else {\n  context.set(\"state\", state);\n  return null;  // skip publish\n}\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  350,
        "y":  260,
        "wires":  [
                      [
                          "686538b93b1a33be",
                          "9942181679d22edb"
                      ]
                  ],
        "info":  "### ðŸ“Œ Function Node Description\r\n\r\nThis function processes raw radar distance data (formatted as `\"ID:distance\"` pairs) to detect **water levels** while accounting for **grass, uneven ground, and noise**.\r\n\r\n**Key features:**\r\n\r\n* Maintains a **rolling history** of distances per radar ID to build a stable **baseline ground level**.\r\n* Uses statistical filters and **outlier rejection** to ignore spikes, grass, and uneven ground.\r\n* Detects water by checking if measured distance is **significantly closer than the baseline** and if readings are stable.\r\n* Aggregates results across multiple radar IDs, applying a **flatness check** to confirm real water surfaces.\r\n* Outputs in **two modes**:\r\n\r\n  * **DEBUG\\_MODE = true** â†’ Full diagnostic JSON (per-ID + global detection details).\r\n  * **DEBUG\\_MODE = false** â†’ Compact alarm JSON for MQTT:\r\n\r\n    ```json\r\n    {\r\n      \"gateway\": \"\u003cGATEWAY\u003e\",\r\n      \"devType\": \"\u003cDEVTYPE\u003e\",\r\n      \"cmd\": \"alarm\",\r\n      \"timestamp\": 1724487600,\r\n      \"distance\": \u003cwaterHeightCm\u003e\r\n    }\r\n    ```\r\n* Publishes only **once every 5 minutes**, but still processes all incoming data to keep baselines updated.\r\n\r\n**Intended use:**\r\nFor radar-based water monitoring systems where the ground may be uneven and covered with vegetation. Helps reduce false positives while still detecting rising water levels reliably.\r\n\r\n---\r\n\r\nDo you want me to also write a **short one-liner summary** (for the Node-RED info panel) alongside this full description?\r\n"
    },
    {
        "id":  "686538b93b1a33be",
        "type":  "debug",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "Water Level",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  390,
        "y":  220,
        "wires":  [

                  ]
    },
    {
        "id":  "3a80a35a6f085a3f",
        "type":  "serial in",
        "z":  "a9f255039c7317e8",
        "g":  "61ecca2b80ffb9e0",
        "name":  "",
        "serial":  "1de5c39d805c3d29",
        "x":  130,
        "y":  120,
        "wires":  [
                      [
                          "5b10600432117ce2",
                          "24aa1d8cd147705a",
                          "0e4076f7d5f7fb98"
                      ]
                  ]
    },
    {
        "id":  "91c8c9203ef24cc4",
        "type":  "inject",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "Every 30 min",
        "props":  [

                  ],
        "repeat":  "1800",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "x":  220,
        "y":  220,
        "wires":  [
                      [
                          "c3ac1ee5c473a524"
                      ]
                  ]
    },
    {
        "id":  "2a7dcb147e1bce7d",
        "type":  "inject",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "Manual snapshot",
        "props":  [

                  ],
        "repeat":  "",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "x":  220,
        "y":  270,
        "wires":  [
                      [
                          "c3ac1ee5c473a524"
                      ]
                  ]
    },
    {
        "id":  "c3ac1ee5c473a524",
        "type":  "exec",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "command":  "/usr/bin/ffmpeg",
        "addpay":  false,
        "append":  "-loglevel error -rtsp_transport tcp -i \"rtsp://admin:P%40jero999@192.168.35.11:554/sub\" -frames:v 1 -f image2pipe -vcodec mjpeg pipe:1",
        "useSpawn":  "true",
        "timer":  "",
        "winHide":  false,
        "oldrc":  false,
        "name":  "ffmpeg â†’ JPEG buffer",
        "x":  480,
        "y":  245,
        "wires":  [
                      [
                          "27c4b540989b8bb4"
                      ],
                      [

                      ],
                      [
                          "08fd8f8992fba0a1"
                      ]
                  ]
    },
    {
        "id":  "27c4b540989b8bb4",
        "type":  "function",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "Wrap JSON + Dashboard",
        "func":  "if (!Buffer.isBuffer(msg.payload) || msg.payload.length === 0) return null;\n\nconst b64 = msg.payload.toString(\u0027base64\u0027);\n\n// MQTT JSON\nconst mqtt = {\n  topic: \"bv35/data/camera\",\n  payload: {\n    gateway: \"7a:4b:ff:38:c2:b0\",\n    devType: \"Milesight MS-C2963\",\n    cmd: \"snapshot\",\n    timestamp: Math.floor(Date.now()/1000),\n    contentType: \"image/jpeg\",\n    image_b64: b64\n  }\n};\n\n// Dashboard image (data URL)\nconst dash = {\n  payload: `data:image/jpeg;base64,${b64}`\n};\n\nreturn [dash, mqtt];",
        "outputs":  2,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  730,
        "y":  245,
        "wires":  [
                      [
                          "7d08364daae97b02"
                      ],
                      [
                          "65e5bea195d79742",
                          "972d912a7db782e7"
                      ]
                  ]
    },
    {
        "id":  "65e5bea195d79742",
        "type":  "mqtt out",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "Publish to MQTT",
        "topic":  "bv35/camera/img",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  990,
        "y":  260,
        "wires":  [

                  ]
    },
    {
        "id":  "08fd8f8992fba0a1",
        "type":  "debug",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "ffmpeg stderr",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "2",
        "targetType":  "msg",
        "x":  730,
        "y":  300,
        "wires":  [

                  ]
    },
    {
        "id":  "972d912a7db782e7",
        "type":  "debug",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "JSON preview",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "x":  980,
        "y":  320,
        "wires":  [

                  ]
    },
    {
        "id":  "7c3771ed37a25f87",
        "type":  "mqtt in",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "",
        "topic":  "bv35/camera/snap",
        "qos":  "2",
        "datatype":  "auto-detect",
        "broker":  "ad38133a844d12e3",
        "nl":  false,
        "rap":  true,
        "rh":  0,
        "inputs":  0,
        "x":  230,
        "y":  325,
        "wires":  [
                      [
                          "c3ac1ee5c473a524",
                          "fb0c6f13359e20f3"
                      ]
                  ]
    },
    {
        "id":  "665e5d2798cef93b",
        "type":  "inject",
        "z":  "aabbaecce1b00e2a",
        "g":  "8d52cfa95701d1f6",
        "name":  "",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "payload":  "",
        "payloadType":  "date",
        "x":  200,
        "y":  440,
        "wires":  [
                      [
                          "d6b682e56e47c08c"
                      ]
                  ]
    },
    {
        "id":  "d6b682e56e47c08c",
        "type":  "mqtt out",
        "z":  "aabbaecce1b00e2a",
        "g":  "8d52cfa95701d1f6",
        "name":  "",
        "topic":  "bv32/camera/snap",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  450,
        "y":  440,
        "wires":  [

                  ]
    },
    {
        "id":  "fb0c6f13359e20f3",
        "type":  "debug",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "name":  "debug 2",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  480,
        "y":  345,
        "wires":  [

                  ]
    },
    {
        "id":  "7d08364daae97b02",
        "type":  "ui_template",
        "z":  "aabbaecce1b00e2a",
        "g":  "bb0cc219db80aa46",
        "group":  "e183b56a98787c57",
        "name":  "Snapshot viewer",
        "order":  1,
        "width":  8,
        "height":  6,
        "format":  "\u003cdiv style=\"text-align:center\"\u003e\n  \u003cimg ng-src=\"{{msg.payload}}\" style=\"max-width:100%; max-height:100%; object-fit:contain; border-radius:8px;\" /\u003e\n\u003c/div\u003e",
        "storeOutMessages":  true,
        "fwdInMessages":  true,
        "resendOnRefresh":  true,
        "templateScope":  "local",
        "x":  980,
        "y":  220,
        "wires":  [
                      [

                      ]
                  ]
    },
    {
        "id":  "1",
        "type":  "inject",
        "z":  "b0eb2326195c59f2",
        "g":  "c1f924b2eff6c07a",
        "name":  "Play Test Audio",
        "props":  [
                      {
                          "p":  "payload.value",
                          "v":  "1",
                          "vt":  "str"
                      }
                  ],
        "repeat":  "",
        "crontab":  "",
        "once":  false,
        "onceDelay":  "",
        "topic":  "",
        "x":  160,
        "y":  60,
        "wires":  [
                      [
                          "a1d841602e6b1968"
                      ]
                  ]
    },
    {
        "id":  "8ae21ac7dbe4b582",
        "type":  "mqtt in",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "",
        "topic":  "bv35/speaker/speak",
        "qos":  "2",
        "datatype":  "auto-detect",
        "broker":  "ad38133a844d12e3",
        "nl":  false,
        "rap":  true,
        "rh":  0,
        "inputs":  0,
        "x":  150,
        "y":  340,
        "wires":  [
                      [
                          "7d23a6db0409c5b3",
                          "2948eb0d9e3c819f"
                      ]
                  ]
    },
    {
        "id":  "7d23a6db0409c5b3",
        "type":  "switch",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Which audio",
        "property":  "payload.value",
        "propertyType":  "msg",
        "rules":  [
                      {
                          "t":  "eq",
                          "v":  "0",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "1",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "2",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "3",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "4",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "5",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "6",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "7",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "8",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "9",
                          "vt":  "str"
                      },
                      {
                          "t":  "eq",
                          "v":  "10",
                          "vt":  "str"
                      }
                  ],
        "checkall":  "true",
        "repair":  false,
        "outputs":  11,
        "x":  370,
        "y":  340,
        "wires":  [
                      [
                          "fa2f7ffd6472b54e"
                      ],
                      [
                          "71664a156fed443c"
                      ],
                      [
                          "9aec2f9041b3fedc"
                      ],
                      [
                          "06761c5803b7da94"
                      ],
                      [
                          "c98f629e0adeb021"
                      ],
                      [
                          "3bef8afbac187647"
                      ],
                      [
                          "d0965ccf1ebc3a65"
                      ],
                      [
                          "03d7fbb3a4decebb"
                      ],
                      [
                          "970b04d56e4d5a7b"
                      ],
                      [
                          "4d69b9971b187965"
                      ],
                      [
                          "15a7048efb16c6a6"
                      ]
                  ]
    },
    {
        "id":  "fa2f7ffd6472b54e",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 0",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=bell1",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  160,
        "wires":  [
                      [
                          "ee66ed6c42a9719c",
                          "c4e364564139d2b4"
                      ]
                  ]
    },
    {
        "id":  "ee66ed6c42a9719c",
        "type":  "debug",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Played",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  790,
        "y":  160,
        "wires":  [

                  ]
    },
    {
        "id":  "a1d841602e6b1968",
        "type":  "mqtt out",
        "z":  "b0eb2326195c59f2",
        "g":  "c1f924b2eff6c07a",
        "name":  "",
        "topic":  "bv35/speaker/speak",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  400,
        "y":  60,
        "wires":  [

                  ]
    },
    {
        "id":  "71664a156fed443c",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 1",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile1",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  200,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "9aec2f9041b3fedc",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 2",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile2",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  240,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "06761c5803b7da94",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 3",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile3",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  280,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "c98f629e0adeb021",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 4",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile4",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  320,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "3bef8afbac187647",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 5",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile5",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  360,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "d0965ccf1ebc3a65",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 6",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile6",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  400,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "03d7fbb3a4decebb",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 7",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile7",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  440,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "970b04d56e4d5a7b",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 8",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile8",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  480,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "4d69b9971b187965",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 9",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile9",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  610,
        "y":  520,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "15a7048efb16c6a6",
        "type":  "http request",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Play 10",
        "method":  "GET",
        "ret":  "txt",
        "paytoqs":  "ignore",
        "url":  "http://192.168.26.22/api/play?action=start\u0026file=userfile10",
        "tls":  "",
        "persist":  false,
        "proxy":  "",
        "insecureHTTPParser":  false,
        "authType":  "",
        "senderr":  false,
        "headers":  [

                    ],
        "x":  600,
        "y":  560,
        "wires":  [
                      [
                          "ee66ed6c42a9719c"
                      ]
                  ]
    },
    {
        "id":  "c4e364564139d2b4",
        "type":  "function",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Speaker Status",
        "func":  "// Build dynamic JSON for \"speak\" command and send to MQTT\n// Only publish if HTTP request was successful.\n//\n// msg.statusCode comes from the HTTP Request node\n// (200 = OK, 2xx = success)\n\nconst DEFAULTS = {\n    gateway: \"7a:4b:ff:38:c2:b0\",\n    devType: \"IP-Speaker\",\n    cmd: \"speak\",\n    topic: \"bv35/speaker/speak\"\n};\n\n// Only continue if HTTP status indicates success\nif (msg.statusCode \u0026\u0026 msg.statusCode \u003e= 200 \u0026\u0026 msg.statusCode \u003c 300) {\n    msg.topic = msg.topic || DEFAULTS.topic;\n    msg.payload = {\n        gateway: msg.gateway || DEFAULTS.gateway,\n        devType: msg.devType || DEFAULTS.devType,\n        cmd: msg.cmd || DEFAULTS.cmd,\n        timestamp: Math.floor(Date.now() / 1000),\n        value: msg.value || 1   // default = 1 if not provided\n    };\n    return msg;   // âœ… success â†’ send to MQTT\n} else {\n    // âŒ failed request â†’ don\u0027t publish\n    node.warn(\"Web request failed: \" + msg.statusCode);\n    return null;  // stops the message here\n}\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  820,
        "y":  320,
        "wires":  [
                      [
                          "51a3da1b50ecd7b1",
                          "98bb99a91bc910d2"
                      ]
                  ]
    },
    {
        "id":  "51a3da1b50ecd7b1",
        "type":  "debug",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Speaker Debug",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  860,
        "y":  280,
        "wires":  [

                  ]
    },
    {
        "id":  "98bb99a91bc910d2",
        "type":  "mqtt out",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "",
        "topic":  "",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  850,
        "y":  360,
        "wires":  [

                  ]
    },
    {
        "id":  "2948eb0d9e3c819f",
        "type":  "debug",
        "z":  "b0eb2326195c59f2",
        "g":  "89f6554eadeaf202",
        "name":  "Inject Debug",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  190,
        "y":  300,
        "wires":  [

                  ]
    },
    {
        "id":  "ba3f955836dd6411",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "decode data",
        "func":  "// Input buffer\nlet buffer = msg.payload; // Assuming msg.payload contains the buffer data\n\nbuffer = buffer.slice(0,72);\n// Decode registers directly into msg.payload\nmsg.payload = {\n    alarmStatus: (buffer[15] \u003c\u003c 8) | buffer[16], // 16-bit value\n    remainingAh: ((buffer[17] \u003c\u003c 8) | buffer[18]) / 10, // 16-bit value, scaled by 10\n    remainingSoC: buffer[19], // 8-bit value\n    humidity: buffer[20], // 8-bit value\n    batteryPower: ((buffer[21] \u003c\u003c 8) | buffer[22]) / 10, // 16-bit value, scaled by 10\n    totalBatteryVoltage: ((buffer[23] \u003c\u003c 8) | buffer[24]) / 10, // 16-bit value, scaled by 10\n    // totalBatteryCurrent: ((buffer[25] \u003c\u003c 8) | buffer[26]) / 10, // 16-bit value, scaled by 10\n    batteryChargingCurrent: ((buffer[27] \u003c\u003c 8) | buffer[28]) / 100, // 16-bit value, scaled by 100\n    batteryDischargingCurrent: ((buffer[29] \u003c\u003c 8) | buffer[30]) / 100, // 16-bit value, scaled by 100\n    Temp1: buffer[31], // 8-bit value\n    Temp2: buffer[32], // 8-bit value\n   // clampingVoltage: ((buffer[47] \u003c\u003c 8) | buffer[48]) / 10 // 16-bit value, scaled by 10\n    // Uncomment the lines below if needed:\n    // internalTimestamp: ((buffer[49] \u003c\u003c 8) | buffer[50]), // 16-bit value\n    // remainingNumberOfDays: ((buffer[52] \u003c\u003c 8) | buffer[53]) / 100 // 16-bit value, scaled by 100\n};\n\n// Return the decoded data\nreturn msg;\n",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  390,
        "y":  140,
        "wires":  [
                      [
                          "0f9698fea83a10c4"
                      ]
                  ]
    },
    {
        "id":  "0f9698fea83a10c4",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  610,
        "y":  60,
        "wires":  [

                  ]
    },
    {
        "id":  "02420378b682d2a9",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  390,
        "y":  100,
        "wires":  [

                  ]
    },
    {
        "id":  "5f7aa11225841d0b",
        "type":  "mqtt out",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "topic":  "bv35/solar/data",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  1000,
        "y":  180,
        "wires":  [

                  ]
    },
    {
        "id":  "7708ede44e016d0a",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "",
        "func":  "// Input buffer\nlet buffer = msg.payload; // Assuming msg.payload contains the buffer data\n\n// Check if buffer has at least 55 elements (buffer[54] exists)\nif (buffer \u0026\u0026 buffer.length \u003e 53) {\n    // Decode the buffer into the desired JSON format\n    msg.payload = {\n        deveui: \"0000000000000001\",\n        ipAdress: \"http://192.168.12.1\", // Static value, replace as needed\n        devicename: \"elastel\",  // Static value, replace as needed\n        timestamp: Date.now(), // Current timestamp in milliseconds\n        alarmInformation: (buffer[15] \u003c\u003c 8) | buffer[16], // 16-bit value\n        batteryChargingCurrent: ((buffer[27] \u003c\u003c 8) | buffer[28]) / 100, // 16-bit value, scaled by 100\n        batteryDischargeCurrent: ((buffer[29] \u003c\u003c 8) | buffer[30]) / 100, // 16-bit value, scaled by 100\n        batteryPower: ((buffer[21] \u003c\u003c 8) | buffer[22]), // 16-bit value, scaled by 10\n        batterySoC: buffer[19], // 8-bit value\n        clampingVoltage: ((buffer[47] \u003c\u003c 8) | buffer[48]) / 10, // 16-bit value, scaled by 10\n        controlInformation: (buffer[11] \u003c\u003c 8) | buffer[12], // Example static value, replace if dynamic\n        internalTimestampHigh: ((buffer[49] \u003c\u003c 8) | buffer[50]), // 16-bit value\n        internalTimestampLow: ((buffer[51] \u003c\u003c 8) | buffer[52]), // 16-bit value\n        remainingAH: ((buffer[17] \u003c\u003c 8) | buffer[18]) / 10, // 16-bit value, scaled by 10\n        remainingDays: ((buffer[52] \u003c\u003c 8) | buffer[53]) / 100, // 16-bit value, scaled by 100\n        temperatures1: buffer[31], // 8-bit value\n        temperatures2: buffer[32], // 8-bit value\n        totalBatteryCurrent: ((buffer[25] \u003c\u003c 8) | buffer[26]) / 10, // 16-bit value, scaled by 10\n        totalBatteryVoltage: ((buffer[23] \u003c\u003c 8) | buffer[24]) / 10, // 16-bit value, scaled by 10\n        humidity: buffer[20]\n    };\n} else {\n    // If buffer[54] doesn\u0027t exist, return an empty message or a warning\n    msg.payload = { error: \"Buffer length is insufficient\" };\n}\n\nreturn msg;\n",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  180,
        "y":  480,
        "wires":  [
                      [
                          "a01ae8ea72715992"
                      ]
                  ]
    },
    {
        "id":  "a01ae8ea72715992",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  370,
        "y":  480,
        "wires":  [

                  ]
    },
    {
        "id":  "ff4e245b16e85dab",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "func":  "\n// Input buffer\nlet buffer = msg.payload; // Assuming msg.payload contains the buffer data\n\n// Convert buffer to an array of hex values\nlet hexArray = Array.from(buffer, byte =\u003e byte.toString(16).padStart(2, \u00270\u0027));\n\n// Construct the output\nmsg.payload = {\n    // originalBuffer: buffer,\n    hexRepresentation: hexArray.join(\" \") // Combine hex values into a single string\n};\n\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  380,
        "y":  180,
        "wires":  [
                      [
                          "b2faa1afe512a80c",
                          "8a9d785e6a5edac1",
                          "5cfb238b3a200525"
                      ]
                  ]
    },
    {
        "id":  "b2faa1afe512a80c",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  610,
        "y":  120,
        "wires":  [

                  ]
    },
    {
        "id":  "e563708f3023885b",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "Full-Decode-based-docs",
        "func":  "let buffer = msg.payload;\n\nbuffer = buffer.slice(11, 62)\n\nfunction toHex(num) {\n    return \"0x\" + num.toString(16).padStart(2, \u00270\u0027).toUpperCase();\n}\n\n// Protocol fields remain in hex\nlet startFlag = toHex(buffer[0]);\nlet headerInfo = toHex(buffer[1]);\nlet controlInfo = toHex(buffer[2]);\nlet messageLength = toHex(buffer[3]);\nlet fragmentOffset = toHex((buffer[4] \u003c\u003c 8) | buffer[5]);\nlet commandData = toHex(buffer[6]);\nlet commandBytes = [toHex(buffer[7]), toHex(buffer[8]), toHex(buffer[9])];\nlet errorCode = toHex(buffer[10]);\nlet functionCode = toHex(buffer[11]);\nlet startAddress = toHex((buffer[12] \u003c\u003c 8) | buffer[13]);\nlet registerCount = toHex(buffer[14]);\n\n// Battery data all in decimal\nlet alarmInformation = (buffer[15] \u003c\u003c 8) | buffer[16];\nlet remainingAH = ((buffer[17] \u003c\u003c 8) | buffer[18]) / 10;\nlet batterySoC = buffer[19];\nlet humidity = buffer[20];\nlet batteryPower = (buffer[21] \u003c\u003c 8) | buffer[22];\nlet totalBatteryVoltage = ((buffer[23] \u003c\u003c 8) | buffer[24]) / 10;\nlet totalBatteryCurrent = ((buffer[25] \u003c\u003c 8) | buffer[26]) / 10;\nlet batteryChargingCurrent = ((buffer[27] \u003c\u003c 8) | buffer[28]) / 100;\nlet batteryDischargeCurrent = ((buffer[29] \u003c\u003c 8) | buffer[30]) / 100;\n\n// Temperature readings - convert to decimal except \"Not installed\"\nlet temperatures = [];\nfor (let i = 0; i \u003c 8; i++) {\n    let temp1 = buffer[31 + i * 2];\n    let temp2 = buffer[32 + i * 2];\n    temperatures.push({\n        temp1: temp1 === 0xCE ? \"Not installed\" : temp1,\n        temp2: temp2 === 0xCE ? \"Not installed\" : temp2\n    });\n}\n\n// CRC and end flag remain in hex\nlet crc = toHex((buffer[buffer.length - 3] \u003c\u003c 8) | buffer[buffer.length - 2]);\nlet endFlag = toHex(buffer[buffer.length - 1]);\n\nmsg.payload = {\n    protocol: {\n        startFlag: startFlag,\n        headerInfo: headerInfo,\n        controlInfo: controlInfo,\n        messageLength: messageLength,\n        fragmentOffset: fragmentOffset,\n        commandData: commandData,\n        commandBytes: commandBytes,\n        errorCode: errorCode,\n        functionCode: functionCode,\n        startAddress: startAddress,\n        registerCount: registerCount\n    },\n    batteryData: {\n        alarmInformation: alarmInformation,\n        remainingAH: remainingAH,\n        batterySoC: batterySoC,\n        humidity: humidity,\n        batteryPower: batteryPower,\n        totalBatteryVoltage: totalBatteryVoltage,\n        totalBatteryCurrent: totalBatteryCurrent,\n        batteryChargingCurrent: batteryChargingCurrent,\n        batteryDischargeCurrent: batteryDischargeCurrent,\n        temperatures: temperatures\n    },\n    verification: {\n        crc: crc,\n        endFlag: endFlag\n    }\n};\n\nreturn msg;",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  210,
        "y":  600,
        "wires":  [
                      [
                          "eec3995c4100cde7"
                      ]
                  ]
    },
    {
        "id":  "f69ef20e49fd5e67",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "8f1bccb954c87175",
        "name":  "Read-Command",
        "func":  "// Define the command to request 22 registers starting from 0x200\n// let commandHex = \"41160F0100009D0A0B0B04020016211A2B\";\nlet commandHex = \"41160F0100003A0A0B0B0402021221B92B\"\n\n// Convert the hex string to a Buffer object\nmsg.payload = Buffer.from(commandHex, \u0027hex\u0027);\n\n// Send the command to the serial out node\nreturn msg;\n",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  340,
        "y":  380,
        "wires":  [
                      [
                          "0870edf5488db2a6"
                      ]
                  ]
    },
    {
        "id":  "ae3ca7f3c39fa801",
        "type":  "inject",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "8f1bccb954c87175",
        "name":  "",
        "props":  [
                      {
                          "p":  "payload"
                      }
                  ],
        "repeat":  "",
        "crontab":  "*/15 0-23 * * *",
        "once":  true,
        "onceDelay":  0.1,
        "topic":  "",
        "payload":  "",
        "payloadType":  "str",
        "x":  170,
        "y":  380,
        "wires":  [
                      [
                          "f69ef20e49fd5e67"
                      ]
                  ]
    },
    {
        "id":  "eec3995c4100cde7",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "debug 9",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  440,
        "y":  600,
        "wires":  [

                  ]
    },
    {
        "id":  "80565d49ed58925c",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "batteryData Decode",
        "func":  "let buffer = msg.payload;\n\nbuffer = buffer.slice(0,61);\n// Function to convert numbers to hex format\nfunction toHex(num) {\n    return \"0x\" + num.toString(16).padStart(2, \u00270\u0027).toUpperCase();\n}\n\n// Convert 16-bit value to signed int16 using two\u0027s complement\nfunction toInt16(highByte, lowByte) {\n    let value = (highByte \u003c\u003c 8) | lowByte;\n    return value \u003e 0x7FFF ? value - 0x10000 : value;\n}\n\n// // Check if buffer length matches expected size\n// if (buffer.length !== 63) {\n//     node.warn(\"Buffer length is not 54. Passing message without decoding.\");\n//     return msg; // Pass through without changes\n// }\n\n// Decode protocol fields\nlet startFlag = toHex(buffer[0]);\nlet headerInfo = toHex(buffer[1]);\nlet controlInfo = toHex(buffer[2]);\nlet messageLength = toHex(buffer[3]);\nlet fragmentOffset = toHex((buffer[4] \u003c\u003c 8) | buffer[5]);\nlet commandData = toHex(buffer[6]);\nlet commandBytes = [toHex(buffer[7]), toHex(buffer[8]), toHex(buffer[9])];\nlet errorCode = toHex(buffer[10]);\nlet functionCode = toHex(buffer[11]);\nlet startAddress = toHex((buffer[12] \u003c\u003c 8) | buffer[13]);\nlet registerCount = toHex(buffer[14]);\n\n// Battery data\nlet alarmInformation = (buffer[15] \u003c\u003c 8) | buffer[16];\nlet remainingAH = ((buffer[17] \u003c\u003c 8) | buffer[18]) / 10;\nlet batterySoC = buffer[19];\nlet humidity = buffer[20];\nlet batteryPower = toInt16(buffer[21], buffer[22]);\nlet totalBatteryVoltage = ((buffer[23] \u003c\u003c 8) | buffer[24]) / 10;\n// Convert currents to signed values\nlet totalBatteryCurrent = toInt16(buffer[25], buffer[26]) / 10;\nlet batteryChargingCurrent = toInt16(buffer[27], buffer[28]) / 100;\nlet batteryDischargeCurrent = toInt16(buffer[29], buffer[30]) / 100;\n\n// Extract first temperature pair\nlet temp1 = buffer[31] === 0xCE ? \"Not installed\" : buffer[31];\nlet temp2 = buffer[32] === 0xCE ? \"Not installed\" : buffer[32];\n\n// CRC and end flag remain in hex\nlet crc = toHex((buffer[buffer.length - 3] \u003c\u003c 8) | buffer[buffer.length - 2]);\nlet endFlag = toHex(buffer[buffer.length - 1]);\n\n// Calculate net discharge current\nlet netDischargeCurrent = batteryDischargeCurrent - batteryChargingCurrent; // Net discharge current in A\n\n// Check if net discharge current is positive (battery is discharging)\nif (netDischargeCurrent \u003e 0) {\n    // Calculate remaining hours and days based on real-time values\n    let remainingHours = remainingAH / netDischargeCurrent; // Remaining hours\n    let remainingDays = remainingHours / 24; // Remaining days\n\n    // Add calculated values to payload\n    msg.payload = {\n        batteryData: {\n            deveui: \"0000000000000001\",\n            ipAdress: \"http://192.168.12.254\",\n            devicename: \"elastel\",\n            alarmInformation: alarmInformation,\n            remainingAH: remainingAH,\n            batterySoC: batterySoC,\n            // humidity: humidity,\n            batteryPower: batteryPower,\n            totalBatteryVoltage: totalBatteryVoltage,\n            totalBatteryCurrent: totalBatteryCurrent,\n            batteryChargingCurrent: batteryChargingCurrent,\n            batteryDischargeCurrent: batteryDischargeCurrent,\n            temperatures1: temp1,\n            temperatures2: temp2,\n            remainingHours: remainingHours.toFixed(2), // Rounded to 2 decimal places\n            remainingDays: remainingDays.toFixed(2)  // Rounded to 2 decimal places\n        }\n    };\n} else {\n    // If the net discharge current is 0 or negative (charging or no load), display \"N/A\"\n    node.warn(\"Net discharge current is zero or negative, unable to calculate remaining life.\");\n    msg.payload = {\n        batteryData: {\n            deveui: \"0000000000000001\",\n            ipAdress: \"http://192.168.12.254\",\n            devicename: \"elastel\",\n            alarmInformation: alarmInformation,\n            remainingAH: remainingAH,\n            batterySoC: batterySoC,\n            // humidity: humidity,\n            batteryPower: batteryPower,\n            totalBatteryVoltage: totalBatteryVoltage,\n            totalBatteryCurrent: totalBatteryCurrent,\n            batteryChargingCurrent: batteryChargingCurrent,\n            batteryDischargeCurrent: batteryDischargeCurrent,\n            temperatures1: temp1,\n            temperatures2: temp2,\n            remainingHours: \"N/A\",\n            remainingDays: \"N/A\"\n        }\n    };\n}\n\nreturn msg;\n",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  200,
        "y":  540,
        "wires":  [
                      [
                          "1be0298cc11e5371"
                      ]
                  ]
    },
    {
        "id":  "1be0298cc11e5371",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "1bbb998942558785",
        "name":  "debug 10",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  400,
        "y":  540,
        "wires":  [

                  ]
    },
    {
        "id":  "4e3d7ac33429ccbe",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "debug 14",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  800,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "f0f34b43162e28ff",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "function 1",
        "func":  "var x = msg.payload;\nmsg.payload = x.slice(11, 62)\nreturn msg;",
        "outputs":  1,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  380,
        "y":  220,
        "wires":  [
                      [
                          "9efa28ef98cd5407"
                      ]
                  ]
    },
    {
        "id":  "9efa28ef98cd5407",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "debug 15",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  860,
        "y":  280,
        "wires":  [

                  ]
    },
    {
        "id":  "5cfb238b3a200525",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "function 2",
        "func":  "function decodeData(msg) {\n    const hexData = msg.payload.hexRepresentation.replace(/ /g, \u0027\u0027);\n    const dataStart = 30;\n    const data = hexData.substring(dataStart);\n\n    function hexToDec(hex) {\n        if (!hex) return 0;\n        return parseInt(hex, 16);\n    }\n\n    // Function to convert hex to signed int8\n    function hexToSignedInt8(hex) {\n        let value = parseInt(hex, 16);\n        // Convert to signed 8-bit\n        if (value \u003e 127) {\n            value = value - 256;\n        }\n        return value;\n    }\n\n    try {\n        // Decode temperatures (2*sint8 format)\n        // 0x020A is temp1/temp2\n        const temp1 = hexToSignedInt8(data.substring(32, 34)); // First byte\n        const temp2 = hexToSignedInt8(data.substring(34, 36)); // Second byte\n\n        // First decode all values\n        const remainingAh = (hexToDec(data.substring(4, 8)) / 10);\n        const dischargeCurrent = (hexToDec(data.substring(28, 32)) / 100);\n        const chargingCurrent = (hexToDec(data.substring(24, 28)) / 100);\n\n        // Calculate net discharge current\n        const netDischargeCurrent = parseFloat(dischargeCurrent) - parseFloat(chargingCurrent);\n\n        // Initialize remaining time values\n        let remainingHours = \"N/A\";\n        let remainingDays = 0;\n\n        // Calculate remaining time if discharging\n        if (netDischargeCurrent \u003e 0) {\n            remainingHours = (parseFloat(remainingAh) / netDischargeCurrent).toFixed(2);\n            remainingDays = (parseFloat(remainingHours) / 24).toFixed(2);\n        }\n\n        // Create payload\n        msg.payload = {\n            gateway: \"a0:19:b2:d2:7a:96\",\n            ipAdress: \"192.168.26.1\",\n            devicename: \"bivocom\",\n            deviceData : \"solar data\",\n            alarm: hexToDec(data.substring(0, 4)),\n            remainingAh: remainingAh,\n            batterySoc: hexToDec(data.substring(8, 10)),\n            humidity: hexToDec(data.substring(10, 12)),\n            batteryPower: hexToDec(data.substring(12, 16)),\n            totalBatteryVoltage: (hexToDec(data.substring(16, 20)) / 10),\n            totalBatteryCurrent: ((hexToDec(data.substring(20, 24)) \u003c\u003c 16 \u003e\u003e 16) / 10),\n            batteryChargingCurrent: chargingCurrent,\n            batteryDischargeCurrent: dischargeCurrent,\n            temperatures1: temp1,\n            temperatures2: temp2,\n            remainingHours: remainingHours,\n            remainingDays: remainingDays\n        };\n\n        return msg;\n\n    } catch (error) {\n        node.error(\"Error decoding data: \" + error.message);\n        return null;\n    }\n}\n\nreturn decodeData(msg);",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  600,
        "y":  180,
        "wires":  [
                      [
                          "4e3d7ac33429ccbe",
                          "b2f915bd6db41bb9"
                      ]
                  ]
    },
    {
        "id":  "8a9d785e6a5edac1",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "function 3",
        "func":  "function decodeData(msg) {\n    const hexData = msg.payload.hexRepresentation.replace(/ /g, \u0027\u0027);\n    const dataStart = 30;\n    const data = hexData.substring(dataStart);\n\n    function hexToDec(hex) {\n        if (!hex) return 0;\n        return parseInt(hex, 16);\n    }\n\n    // Function to convert hex to signed int8\n    function hexToSignedInt8(hex) {\n        let value = parseInt(hex, 16);\n        // Convert to signed 8-bit\n        if (value \u003e 127) {\n            value = value - 256;\n        }\n        return value;\n    }\n\n    try {\n        // Decode temperatures (2*sint8 format)\n        // 0x020A is temp1/temp2\n        const temp1 = hexToSignedInt8(data.substring(32, 34)); // First byte\n        const temp2 = hexToSignedInt8(data.substring(34, 36)); // Second byte\n\n        // First decode all values\n        const remainingAh = (hexToDec(data.substring(4, 8)) / 10).toFixed(1);\n        const dischargeCurrent = (hexToDec(data.substring(28, 32)) / 100).toFixed(2);\n        const chargingCurrent = (hexToDec(data.substring(24, 28)) / 100).toFixed(2);\n\n        // Calculate net discharge current\n        const netDischargeCurrent = parseFloat(dischargeCurrent) - parseFloat(chargingCurrent);\n\n        // Initialize remaining time values\n        let remainingHours = \"N/A\";\n        let remainingDays = \"N/A\";\n\n        // Calculate remaining time if discharging\n        if (netDischargeCurrent \u003e 0) {\n            remainingHours = (parseFloat(remainingAh) / netDischargeCurrent).toFixed(2);\n            remainingDays = (parseFloat(remainingHours) / 24).toFixed(2);\n        }\n\n        // Create payload\n        msg.payload = {\n            deveui: \"0000000000000001\",\n            ipAdress: \"http://192.168.12.254\",\n            devicename: \"elastel\",\n            alarm: hexToDec(data.substring(0, 4)),\n            remainingAh: remainingAh,\n            batterySoc: hexToDec(data.substring(8, 10)),\n            humidity: hexToDec(data.substring(10, 12)),\n            power: hexToDec(data.substring(12, 16)),\n            voltage: (hexToDec(data.substring(16, 20)) / 10).toFixed(1),\n            totalCurrent: ((hexToDec(data.substring(20, 24)) \u003c\u003c 16 \u003e\u003e 16) / 10).toFixed(1),\n            chargingCurrent: chargingCurrent,\n            dischargeCurrent: dischargeCurrent,\n            temperatures1: temp1,\n            temperatures2: temp2,\n            remainingHours: remainingHours,\n            remainingDays: remainingDays\n        };\n\n        return msg;\n\n    } catch (error) {\n        node.error(\"Error decoding data: \" + error.message);\n        return null;\n    }\n}\n\nreturn decodeData(msg);",
        "outputs":  1,
        "timeout":  "",
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  600,
        "y":  220,
        "wires":  [
                      [
                          "81f3c0c393123c1a"
                      ]
                  ]
    },
    {
        "id":  "81f3c0c393123c1a",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "debug 16",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  880,
        "y":  240,
        "wires":  [

                  ]
    },
    {
        "id":  "49e26240e82539d0",
        "type":  "serial in",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "",
        "serial":  "7459e1c0f90208e3",
        "x":  170,
        "y":  180,
        "wires":  [
                      [
                          "02420378b682d2a9",
                          "ff4e245b16e85dab",
                          "ba3f955836dd6411",
                          "f0f34b43162e28ff"
                      ]
                  ]
    },
    {
        "id":  "0870edf5488db2a6",
        "type":  "serial out",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "8f1bccb954c87175",
        "name":  "command request",
        "serial":  "7459e1c0f90208e3",
        "x":  590,
        "y":  380,
        "wires":  [

                  ]
    },
    {
        "id":  "b2f915bd6db41bb9",
        "type":  "function",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "function 7",
        "func":  "let payload = msg.payload;\n\nconst MPPT_EFFICIENCY = 0.95;\n\n// 1. Total energy discharge\npayload.totalEnergyDischarge = payload.batteryDischargeCurrent * payload.totalBatteryVoltage;\n\n// 2. Total energy charge\npayload.totalEnergyCharge = payload.batteryChargingCurrent * payload.totalBatteryVoltage;\n\n// 3. Dynamic solar panel voltage (calculated from power)\nlet solarPower = (payload.totalBatteryVoltage * payload.batteryChargingCurrent) / MPPT_EFFICIENCY;\npayload.solarPanelVoltage = (payload.batteryChargingCurrent \u003e 0)\n    ? (solarPower / payload.batteryChargingCurrent)\n    : 0;\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  820,
        "y":  180,
        "wires":  [
                      [
                          "2dd81a5f0623505b",
                          "5f7aa11225841d0b"
                      ]
                  ]
    },
    {
        "id":  "2dd81a5f0623505b",
        "type":  "debug",
        "z":  "d3dfdfd513fb0aa2",
        "g":  "9b60db2e6429cd60",
        "name":  "debug 25",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "false",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  920,
        "y":  120,
        "wires":  [

                  ]
    },
    {
        "id":  "51ac74c52f6a4023",
        "type":  "inject",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Reset Rainfall",
        "props":  [

                  ],
        "repeat":  "",
        "crontab":  "00 00 * * *",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "x":  140,
        "y":  200,
        "wires":  [
                      [
                          "e76c5fac03f25395"
                      ]
                  ]
    },
    {
        "id":  "e76c5fac03f25395",
        "type":  "function",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Safer Modbus request",
        "func":  "// ---- Config ----\nconst SLAVE = 0x01;\nconst FC = 0x03;        // Read Holding Registers\nconst START = 0x0000;      // address\nconst QTY = 0x0001;      // registers to read\n// ----------------\n\nfunction crc16(buf) {\n    let crc = 0xFFFF;\n    for (let i = 0; i \u003c buf.length; i++) {\n        crc ^= buf[i];\n        for (let b = 0; b \u003c 8; b++) crc = (crc \u0026 1) ? (crc \u003e\u003e\u003e 1) ^ 0xA001 : (crc \u003e\u003e\u003e 1);\n    }\n    return crc \u0026 0xFFFF;\n}\n\nconst req = Buffer.alloc(6);\nreq[0] = SLAVE;\nreq[1] = FC;\nreq[2] = (START \u003e\u003e 8) \u0026 0xFF;\nreq[3] = START \u0026 0xFF;\nreq[4] = (QTY \u003e\u003e 8) \u0026 0xFF;\nreq[5] = QTY \u0026 0xFF;\n\nconst crc = crc16(req);\nconst frame = Buffer.concat([req, Buffer.from([crc \u0026 0xFF, (crc \u003e\u003e 8) \u0026 0xFF])]);\n\nmsg.payload = frame;\nreturn msg;\n",
        "outputs":  1,
        "timeout":  0,
        "noerr":  0,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  380,
        "y":  160,
        "wires":  [
                      [
                          "5758f65c54c6980e"
                      ]
                  ]
    },
    {
        "id":  "3204f791fa664ace",
        "type":  "function",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Hardened Decoder",
        "func":  "/***** CONFIG (publish shape kept minimal) *****/\nconst GATEWAY     = \"7a:4b:ff:38:c2:b0\";\nconst DEVTYPE     = \"RS-FYL-*-1-EX\";\nconst CMD         = \"tip\";\nconst BUCKET_MM   = 0.1;        // mm per tip (device uploads x10 of mm)\nconst REG_BITS    = 16;         // 16 or 32\nconst MAX_DELTA   = 200;        // tips; anti-spike\nconst MIN_INTERVAL_S = 2;       // debounce very fast repeats\nconst DEVICE_KEY  = \"rain:slave1\";\nconst TZ          = \"Asia/Kuala_Lumpur\";\n/************************************************/\n\nfunction toBuf(x){ return Buffer.isBuffer(x) ? x : Buffer.from(Array.isArray(x) ? x : [], \"binary\"); }\nfunction crc16(data){\n  let crc = 0xFFFF;\n  for (let i = 0; i \u003c data.length; i++) {\n    crc ^= data[i];\n    for (let b = 0; b \u003c 8; b++) crc = (crc \u0026 1) ? (crc \u003e\u003e\u003e 1) ^ 0xA001 : (crc \u003e\u003e\u003e 1);\n  }\n  return crc \u0026 0xFFFF;\n}\nfunction ymd(ts, tz){\n  const d = new Date(ts * 1000);\n  const fmt = new Intl.DateTimeFormat(\u0027en-CA\u0027, { timeZone: tz, year:\u0027numeric\u0027, month:\u00272-digit\u0027, day:\u00272-digit\u0027 });\n  return fmt.format(d); // YYYY-MM-DD\n}\n\nconst buf = toBuf(msg.payload);\nif (buf.length \u003c 7) return [null, null];\n\n// Expect: 01 03 02 [HI LO] CRClo CRChi\nconst func = buf[1], count = buf[2];\nif (func !== 0x03 || count !== 2) return [null, null];\n\n// CRC check\nconst dataPart = buf.slice(0, 3 + count);\nconst gotCrc = (buf[4 + count] \u003c\u003c 8) | buf[3 + count];\nconst calc = crc16(dataPart);\nif (gotCrc !== calc) {\n  node.status({fill:\"red\", shape:\"ring\", text:\"CRC fail\"});\n  return [null, {error:\"crc\"}];\n}\n\n// Raw 16-bit big-endian counter (deviceâ€™s rain register is 0000H; scaled x10 in docs)\nconst current = (buf[3] \u003c\u003c 8) | buf[4];\nconst now = Math.floor(Date.now() / 1000);\n\n// Load state\nconst key = (s)=\u003e`${DEVICE_KEY}:${s}`;\nlet prev    = context.get(key(\"prev\"));\nlet lastTs  = context.get(key(\"lastTs\"));\nlet dayStr  = context.get(key(\"dayStr\"));\nlet dailyMM = context.get(key(\"dailyMM\")) || 0;\n\n// Midnight rollover for daily total (local TZ)\nconst today = ymd(now, TZ);\nif (!dayStr || dayStr !== today) { dayStr = today; dailyMM = 0; }\n\n// Debounce\nif (typeof lastTs === \"number\" \u0026\u0026 (now - lastTs) \u003c MIN_INTERVAL_S) {\n  node.status({fill:\"yellow\", shape:\"dot\", text:`debounce ${now-lastTs}s`});\n  return [null, {debug:\"debounce\"}];\n}\n\n// Delta tips with rollover\nconst MAXVAL = (REG_BITS === 32) ? 0xFFFFFFFF : 0xFFFF;\nlet deltaTips = 0, firstRead = false;\nif (typeof prev !== \"number\") { firstRead = true; deltaTips = 0; }\nelse if (current \u003e= prev)      { deltaTips = current - prev; }\nelse                           { deltaTips = (MAXVAL - prev + 1) + current; }\n\n// Anti-spike\nif (deltaTips \u003e MAX_DELTA) {\n  node.status({fill:\"yellow\", shape:\"ring\", text:`spike ${deltaTips} tips ignored`});\n  deltaTips = 0;\n}\n\n// Convert to mm since last poll\nconst rainMM = deltaTips * BUCKET_MM;\ndailyMM += rainMM;\nconst dt = (typeof lastTs === \"number\") ? Math.max(1, now - lastTs) : 0;\nconst rate = dt \u003e 0 ? (rainMM * 3600) / dt : 0;\n\n// Persist\ncontext.set(key(\"prev\"), current);\ncontext.set(key(\"lastTs\"), now);\ncontext.set(key(\"dayStr\"), dayStr);\ncontext.set(key(\"dailyMM\"), dailyMM);\n\n// --- OUTPUTS ---\n// 1) PUBLISH: minimal 5-field payload ONLY\nconst outPublish = {\n  gateway:   GATEWAY,\n  devType:   DEVTYPE,\n  cmd:       CMD,\n  timestamp: now,\n  value:     rainMM            // strictly the mm since previous valid poll\n};\n\n// 2) DEBUG: richer info for your troubleshooting (DO NOT publish to prod topic)\nconst outDebug = {\n  gateway:   GATEWAY,\n  devType:   DEVTYPE,\n  cmd:       CMD,\n  timestamp: now,\n  value:     rainMM,\n  rate_mmh:  Number(rate.toFixed(3)),\n  daily_mm:  Number(dailyMM.toFixed(3)),\n  counter:   current,\n  dt_s:      dt,\n  first:     firstRead\n};\n\nnode.status({fill:\"green\", shape:\"dot\", text:`Î”${rainMM.toFixed(2)}mm | daily ${dailyMM.toFixed(2)}mm`});\nreturn [ { payload: outPublish }, { payload: outDebug } ];\n",
        "outputs":  2,
        "timeout":  0,
        "noerr":  8,
        "initialize":  "",
        "finalize":  "",
        "libs":  [

                 ],
        "x":  770,
        "y":  160,
        "wires":  [
                      [
                          "319c1fe4768ca6de"
                      ],
                      [
                          "d55cd34d1bb40bde"
                      ]
                  ],
        "info":  "---\r\n\r\n### **Node Description â€“ Decode RS-FYLGZ-N01-1 Optical Tipping Bucket Rain Sensor**\r\n\r\nThis Function node decodes Modbus-RTU responses from the **Renkeer RS-FYLGZ-N01-1 Optical Tipping Bucket Rain + Light Sensor** and outputs rainfall data.\r\n\r\n#### **What it does**\r\n\r\n1. **Parses Modbus response frame**\r\n\r\n   * Expects `01 03 02 HI LO CRClo CRChi` (slave=0x01, FC=0x03, 1 register read).\r\n   * Verifies CRC16 checksum.\r\n   * Extracts the rain register (`0000H`), which the device outputs as **10Ã— the actual rainfall value**.\r\n\r\n2. **Calculates rainfall delta**\r\n\r\n   * Reads the cumulative tip counter.\r\n   * Tracks the previous value in Node-RED context.\r\n   * Computes the **delta tips** since last read, handling 16-bit rollover.\r\n   * Converts tips â†’ rainfall in mm (bucket = 0.1 mm/tip).\r\n\r\n3. **Applies safety checks**\r\n\r\n   * Debounces very fast repeats (\u003c2 s).\r\n   * Ignores unrealistic spikes (\u003e200 tips).\r\n   * Resets daily totals at **local midnight (Asia/Kuala\\_Lumpur)**.\r\n\r\n4. **Outputs two streams**\r\n\r\n   * **Output 1 (Publish)** â†’ **minimal JSON** for production MQTT:\r\n\r\n     ```json\r\n     {\r\n       \"gateway\": \"a0:19:b2:d2:7a:ce\",\r\n       \"devType\": \"RS-FYL-*-1-EX\",\r\n       \"cmd\": \"tip\",\r\n       \"timestamp\": 1756382697,\r\n       \"value\": 0.3\r\n     }\r\n     ```\r\n\r\n     â€“ contains only the five fields you want to publish.\r\n   * **Output 2 (Debug)** â†’ full diagnostics:\r\n\r\n     ```json\r\n     {\r\n       \"gateway\": \"...\",\r\n       \"devType\": \"...\",\r\n       \"cmd\": \"tip\",\r\n       \"timestamp\": 1756382697,\r\n       \"value\": 0.3,\r\n       \"rate_mmh\": 2.1,\r\n       \"daily_mm\": 5.6,\r\n       \"counter\": 123,\r\n       \"dt_s\": 300,\r\n       \"first\": false\r\n     }\r\n     ```\r\n\r\n     â€“ includes rainfall rate (mm/h), daily accumulation, raw counter, interval, etc. for debugging or dashboards.\r\n\r\n#### **Wiring**\r\n\r\n* **Output 1** â†’ MQTT Out (`bv32/rain/data`) or your database.\r\n* **Output 2** â†’ Debug node or secondary MQTT topic (non-production).\r\n\r\n---"
    },
    {
        "id":  "30eaf86bb2bab5c7",
        "type":  "inject",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Periodic Inject",
        "props":  [

                  ],
        "repeat":  "300",
        "crontab":  "",
        "once":  false,
        "onceDelay":  0.1,
        "topic":  "",
        "x":  140,
        "y":  120,
        "wires":  [
                      [
                          "e76c5fac03f25395"
                      ]
                  ]
    },
    {
        "id":  "1d4974c2ad58e0d9",
        "type":  "mqtt in",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "",
        "topic":  "bv35/rain/tip",
        "qos":  "2",
        "datatype":  "auto-detect",
        "broker":  "ad38133a844d12e3",
        "nl":  false,
        "rap":  true,
        "rh":  0,
        "inputs":  0,
        "x":  150,
        "y":  160,
        "wires":  [
                      [
                          "e76c5fac03f25395"
                      ]
                  ]
    },
    {
        "id":  "5758f65c54c6980e",
        "type":  "serial request",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "",
        "serial":  "9e490f20ec5dd3a7",
        "x":  580,
        "y":  160,
        "wires":  [
                      [
                          "3204f791fa664ace",
                          "78cc5b820a41572a"
                      ]
                  ]
    },
    {
        "id":  "319c1fe4768ca6de",
        "type":  "mqtt out",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "",
        "topic":  "bv35/rain/data",
        "qos":  "",
        "retain":  "",
        "respTopic":  "",
        "contentType":  "",
        "userProps":  "",
        "correl":  "",
        "expiry":  "",
        "broker":  "ad38133a844d12e3",
        "x":  980,
        "y":  160,
        "wires":  [

                  ]
    },
    {
        "id":  "78cc5b820a41572a",
        "type":  "debug",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Raw Tipping",
        "active":  false,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  590,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "d55cd34d1bb40bde",
        "type":  "debug",
        "z":  "9071ee17a216293a",
        "g":  "109a5214842acafe",
        "name":  "Debug Tipping",
        "active":  true,
        "tosidebar":  true,
        "console":  false,
        "tostatus":  false,
        "complete":  "payload",
        "targetType":  "msg",
        "statusVal":  "",
        "statusType":  "auto",
        "x":  800,
        "y":  80,
        "wires":  [

                  ]
    },
    {
        "id":  "28e3fc2b15cb7cbb",
        "type":  "global-config",
        "env":  [

                ],
        "modules":  {
                        "node-red-node-serialport":  "2.0.3",
                        "node-red-dashboard":  "3.6.6"
                    }
    }
]
